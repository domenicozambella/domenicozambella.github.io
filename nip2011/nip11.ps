%!PS-Adobe-2.0
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: nip11.dvi
%%CreationDate: Wed Jan 12 07:37:38 2011
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: CMBX10 CMR10 CMMI10 MnSymbol10 CMMI7
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -t a4 -Pwww nip11.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2011.01.12:0737
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 90 2009-01-30 10:58:51Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.06, 2009/01/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
%/NArray { 
%   aload length 2 div dup dup cvi eq not { exch pop } if /n exch
%   cvi def 
%} def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  showpoints { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 26 2008-06-14 11:50:02Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.01, 2008/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 26 2008-06-14 11:50:02Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2008/04/18
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def

end
/PSTricksDotFont exch definefont pop

%% end

%%EndProcSet
%%BeginProcSet: MnSymbolE.enc 0 0
/MnSymbolE [
%00
  /bracketleft /bracketleft.alt1 /bracketleft.alt2 /bracketleft.alt3 /bracketleft.alt4 /bracketright /bracketright.alt /bracketright.alt2
  /bracketright.alt3 /bracketright.alt4 /uni230A /uni230A.alt1 /uni230A.alt2 /uni230A.alt3 /uni230A.alt4 /uni230B
%10
  /uni230B.alt1 /uni230B.alt2 /uni230B.alt3 /uni230B.alt4 /uni2308 /uni2308.alt1 /uni2308.alt2 /uni2308.alt3
  /uni2308.alt4 /uni2309 /uni2309.alt1 /uni2309.alt2 /uni2309.alt3 /uni2309.alt4 /uni231C.alt1 /uni231C.alt2
%20
  /uni231C.alt3 /uni231C.alt4 /uni231C.alt5 /uni231D.alt1 /uni231D.alt2 /uni231D.alt3 /uni231D.alt4 /uni231D.alt5
  /uni231E.alt1 /uni231E.alt2 /uni231E.alt3 /uni231E.alt4 /uni231E.alt5 /uni231F.alt1 /uni231F.alt2 /uni231F.alt3
%30
  /uni231F.alt4 /uni231F.alt5 /ullcorner /ullcorner.alt1 /ullcorner.alt2 /ullcorner.alt3 /ullcorner.alt4 /ulrcorner
  /ulrcorner.alt1 /ulrcorner.alt2 /ulrcorner.alt3 /ulrcorner.alt4 /uni23A1 /uni23A4 /uni23A3 /uni23A6
%40
  /uni23A2 /uni23A5 /uni27E6 /uni27E6.alt1 /uni27E6.alt2 /uni27E6.alt3 /uni27E6.alt4 /uni27E7
  /uni27E7.alt1 /uni27E7.alt2 /uni27E7.alt3 /uni27E7.alt4 /lsemtop /rsemtop /lsembot /rsembot
%50
  /lsemmod /rsemmod /arrowvert /divides.alt0 /divides.alt1 /divides.alt2 /divides.alt3 /divides.alt4
  /Arrowvert /parallel.alt1 /parallel.alt2 /parallel.alt3 /parallel.alt4 /parallel.alt5 /wavy /Wavy
%60
  /uni27E8 /uni27E8.alt /uni27E8.alt2 /uni27E8.alt3 /uni27E8.alt4 /uni27E9 /uni27E9.alt1 /uni27E9.alt2
  /uni27E9.alt3 /uni27E9.alt4 /anglebar.left /anglebar.left.alt1 /anglebar.left.alt2 /anglebar.left.alt3 /anglebar.left.alt4 /anglebar.right
%70
  /anglebar.right.alt1 /anglebar.right.alt2 /anglebar.right.alt3 /anglebar.right.alt4 /uni27EA /uni27EA.alt1 /uni27EA.alt2 /uni27EA.alt3
  /uni27EA.alt4 /uni27EB /uni27EB.alt1 /uni27EB.alt2 /uni27EB.alt3 /uni27EB.alt4 /slash.left /slash.left.alt1
%80
  /slash.left.alt2 /slash.left.alt3 /slash.left.alt4 /slash.right /slash.right.alt1 /slash.right.alt2 /slash.right.alt3 /slash.right.alt4
  /parenleft /parenleft.alt1 /parenleft.alt2 /parenleft.alt3 /parenleft.alt4 /parenright /parenright.alt1 /parenright.alt2
%90
  /parenright.alt3 /parenright.alt4 /uni239B /uni239E /uni239D /uni23A0 /uni239C /uni239F
  /braceleft /braceleft.alt1 /braceleft.alt2 /braceleft.alt3 /braceleft.alt4 /braceright /braceright.alt1 /braceright.alt2
%A0
  /braceright.alt3 /braceright.alt4 /uni23A7 /uni23AB /uni23A9 /uni23AD /uni23A8 /uni23AC
  /uni23AA /ucurly /ucurly.alt1 /ucurly.alt2 /ucurly.alt3 /ucurly.alt4 /dcurly /dcurly.alt1
%B0
  /dcurly.alt2 /dcurly.alt3 /dcurly.alt4 /ucurlyleft /dcurlyleft /ucurlyright /dcurlyright /ucurlymid
  /dcurlymid /udcurlymod /radical /radical.alt1 /radical.alt2 /radical.alt3 /radical.alt4 /roottop
%C0
  /rootbot /rootmod /circumflexcmb /circumflexcmb.alt1 /circumflexcmb.alt2 /circumflexcmb.alt3 /circumflexcmb.alt4 /tildecomb
  /tildecomb.alt1 /tildecomb.alt2 /tildecomb.alt3 /tildecomb.alt4 /wideparen1 /wideparen2 /wideparen3 /wideparen4
%D0
  /wideparen5 /uni20D7 /uni0335 /uni0337 /uni0338 /uparrow /downarrow /arrowmod 
  /uparrowdbl /downarrowdbl /arrowmoddbl /arrow0 /arrow1 /arrow2 /arrow3 /arrow4 
%E0
  /arrow5 /arrow6 /arrow7 /.notdef /.notdef /.notdef /.notdef /.notdef
  /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
%F0
  /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
  /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
] def


%%EndProcSet
%%BeginProcSet: MnSymbolD.enc 0 0
/MnSymbolD [
%00
  /equal /equivalence /similar /uni223D /approxequal /backapprox /uni224B /backtriplesim
  /uni2243 /uni22CD /uni2242 /backeqsim /congruent /uni224C /uni224A /backapproxeq
%10
  /uni224F /eqbump /uni224E /uni2250 /uni2A66 /uni2251 /uni2252 /uni2253
  /uni2323 /uni2322 /doublesmile /doublefrown /triplesmile /triplefrown /uni224D /frownsmile
%20
  /smileeq /frowneq /eqsmile /eqfrown /doublesmileeq /doublefrowneq /smileeqfrown /frowneqsmile
  /smilefrowneq /frownsmileeq /sqsmile /sqfrown /sqdoublesmile /sqdoublefrown /sqtriplesmile /sqtriplefrown
%30
  /sqsmilefrown /sqfrownsmile /sqsmileeq /sqfrowneq /sqeqsmile /sqeqfrown /sqdoublesmileeq /sqdoublefrowneq
  /sqsmileeqfrown /sqfrowneqsmile /uni2256 /uni2257 /uni225C /uni2259 /element /suchthat
%40
  /less /greater /lessequal /greaterequal /uni2A7D /uni2A7E /uni2266 /uni2267
  /uni2276 /uni2277 /uni22DA /uni22DB /uni2A8B /uni2A8C /lesseqgtrslant /gtreqlessslant
%50
  /uni226A /uni226B /uni22D8 /uni22D9 /uni22B2 /uni22B3 /uni22B4 /uni22B5
  /uni228F /uni2290 /uni2291 /uni2292 /sqsubseteqq /sqsupseteqq /Sqsubset /Sqsupset
%60
  /propersubset /propersuperset /reflexsubset /reflexsuperset /uni2AC5 /uni2AC6 /uni22D0 /uni22D1
  /uni227A /uni227B /uni2AAF /uni2AB0 /uni227C /uni227D /uni227E /uni227F
%70
  /uni2AB7 /uni2AB8 /uni22D6 /uni22D7 /leqdot /geqdot /uni2A7F /uni2A80
  /notequal /uni2262 /uni2241 /uni223D0338 /uni2249 /backapprox_uni0338 /uni224B0338 /backtriplesim_uni0338
%80
  /uni2244 /uni22CD0338 /uni22420338 /backeqsim_uni0338 /uni2247 /uni224C0338 /uni224A0338 /backapproxeq_uni0338
  /uni224F0338 /eqbump_uni0338 /uni224E0338 /uni22500338 /uni2A660338 /uni22510338 /uni22520338 /uni22530338
%90
  /uni23230338 /uni23220338 /doublesmile_uni0338 /doublefrown_uni0338 /triplesmile_uni0338 /triplefrown_uni0338 /uni226D /frownsmile_uni0338
  /smileeq_uni0338 /frowneq_uni0338 /eqsmile_uni0338 /eqfrown_uni0338 /doublesmileeq_uni0338 /doublefrowneq_uni0338 /smileeqfrown_uni0338 /frowneqsmile_uni0338
%A0
  /smilefrowneq_uni0338 /frownsmileeq_uni0338 /sqsmile_uni0338 /sqfrown_uni0338 /sqdoublesmile_uni0338 /sqdoublefrown_uni0338 /sqtriplesmile_uni0338 /sqtriplefrown_uni0338
  /sqsmilefrown_uni0338 /sqfrownsmile_uni0338 /sqsmileeq_uni0338 /sqfrowneq_uni0338 /sqeqsmile_uni0338 /sqeqfrown_uni0338 /sqdoublesmileeq_uni0338 /sqdoublefrowneq_uni0338
%B0
  /sqsmileeqfrown_uni0338 /sqfrowneqsmile_uni0338 /uni22560338 /uni22570338 /uni225C0338 /uni22590338 /notelement /uni220C
  /uni226E /uni226F /uni2270 /uni2271 /uni2270.alt1 /uni2271.alt1 /uni22660338 /uni22670338
%C0
  /uni2278 /uni2279 /uni22DA0338 /uni22DB0338 /uni2A8B0338 /uni2A8C0338 /lesseqgtrslant_uni0338 /gtreqlessslant_uni0338
  /uni226A0338 /uni226B0338 /uni22D80338 /uni22D90338 /uni22EA /uni22EB /uni22EC /uni22ED
%D0
  /uni228F0338 /uni22900338 /uni22E2 /uni22E3 /sqsubseteqq_uni0338 /sqsupseteqq_uni0338 /Sqsubset_uni0338 /Sqsupset_uni0338
  /notsubset /uni2285 /uni2288 /uni2289 /uni2AC50338 /uni2AC60338 /uni22D00338 /uni22D10338
%E0
  /uni2280 /uni2281 /uni2AAF0338 /uni2AB00338 /uni22E0 /uni22E1 /uni227E0338 /uni227F0338
  /uni2AB70338 /uni2AB80338 /uni22D60338 /uni22D70338 /leqdot_uni0338 /geqdot_uni0338 /uni2A7F0338 /uni2A800338
%F0
  /uni2268 /uni2269 /lessneqqgtr /gtrneqqless /uni22E4 /uni22E5 /sqsubsetneqq /sqsupsetneqq
  /uni228A /uni228B /uni2ACB /uni2ACC /uni22E8 /uni22E9 /uni2AB9 /uni2ABA
] def


%%EndProcSet
%%BeginProcSet: MnSymbolA.enc 0 0
/MnSymbolA [
%00
  /arrowright /arrowup /arrowleft /arrowdown /arrowupright /arrowupleft /arrowdownleft /arrowdownright
  /arrowdblright /arrowdblup /arrowdblleft /arrowdbldown /uni21D7 /uni21D6 /uni21D9 /uni21D8
%10
  /arrowboth /arrowupdn /uni2921 /uni2922 /arrowdblboth /uni21D5 /Neswarrow /Nwsearrow
  /uni21A0 /uni219F /uni219E /uni21A1 /twoheadnearrow /twoheadnwarrow /twoheadswarrow /twoheadsearrow
%20
  /uni21A3 /uparrowtail /uni21A2 /downarrowtail /nearrowtail /nwarrowtail /swarrowtail /searrowtail
  /uni21A6 /uni21A5 /uni21A4 /uni21A7 /nemapsto /nwmapsto /swmapsto /semapsto
%30
  /uni21AA /lhookuparrow /lhookleftarrow /lhookdownarrow /lhooknearrow /uni2923 /lhookswarrow /uni2925
  /rhookrightarrow /rhookuparrow /uni21A9 /rhookdownarrow /uni2924 /rhooknwarrow /uni2926 /rhooksearrow
%40
  /harpoonrightbarbup /uni21BF /uni21BD /uni21C2 /neharpoonup /nwharpoonup /swharpoonup /seharpoonup
  /uni21C1 /uni21BE /harpoonleftbarbup /uni21C3 /neharpoondown /nwharpoondown /swharpoondown /seharpoondown
%50
  /uni294B /updownharpoonleftright /neswharpoonnwse /senwharpoonnesw /uni294A /updownharpoonrightleft /neswharpoonsenw /nwseharpoonswne
  /uni21CC /uni296E /neswharpoons /senwharpoons /uni21CB /uni296F /swneharpoons /nwseharpoons
%60
  /arrowdashright /arrowdashup /arrowdashleft /arrowdashdown /dashednearrow /dashednwarrow /dashedswarrow /dashedsearrow
  /uni22B8 /uni2AEF /uni27DC /uni2AF0 /nespoon /nwspoon /swspoon /sespoon
%70
  /rightfilledspoon /upfilledspoon /leftfilledspoon /downfilledspoon /nefilledspoon /nwfilledspoon /swfilledspoon /sefilledspoon
  /rightfootline /upfootline /leftfootline /downfootline /nefootline /nwfootline /swfootline /sefootline
%80
  /rightfree /upfree /leftfree /uni2ADD /nefree /nwfree /swfree /sefree
  /rightpitchfork /uni22D4 /leftpitchfork /uni2ADB /nepitchfork /nwpitchfork /swpitchfork /sepitchfork
%90
  /uni21C9 /uni21C8 /uni21C7 /uni21CA /nenearrows /nwnwarrows /swswarrows /sesearrows
  /arrowrightoverleft /updownarrows /neswarrows /nwsearrows /uni21C6 /downuparrows /swnearrows /senwarrows
%A0
  /uni219D /uplsquigarrow /leftlsquigarrow /downlsquigarrow /nelsquigarrow /nwlsquigarrow /swlsquigarrow /selsquigarrow
  /rightrsquigarrow /uprsquigarrow /uni219C /downrsquigarrow /nersquigarrow /nwrsquigarrow /swrsquigarrow /sersquigarrow
%B0
  /uni21AD /squigarrowupdown /squigarrowrightleft /squigarrowdownup /squigarrownesw /squigarrownwse /squigarrowswne /squigarrowsenw
  /uni21B7 /lcurvearrowup /lcurvearrowleft /uni2938 /lcurvearrowne /lcurvearrownw /lcurvearrowsw /lcurvearrowse
%C0
  /rcurvearrowright /rcurvearrowup /uni21B6 /uni2939 /rcurvearrowne /rcurvearrownw /rcurvearrowsw /rcurvearrowse
  /curvearrowleftright /curvearrowupdown /curvearrowrightleft /curvearrowdownup /curvearrownesw /curvearrownwse /curvearrowswne /curvearrowsenw
%D0
  /leftrightline /divides /neswline /nwseline /Leftrightline /parallel /Neswline /Nwseline
  /uni22A2 /perpendicular /uni22A3 /uni22A4 /nevdash /nwvdash /swvdash /sevdash
%E0
  /uni22A7 /upmodels /leftmodels /downmodels /nemodels /nwmodels /swmodels /semodels
  /uni22A9 /uni234A /leftVdash /uni2351 /neVdash /nwVdash /swVdash /seVdash
%F0
  /uni22AB /upModels /leftModels /downModels /neModels /nwModels /swModels /seModels
  /uni293F /uni21BA /uni27F2 /rcirclearrowdown /uni27F3 /uni21BB /uni293E /lcirclearrowdown
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMMI7
%!PS-AdobeFont-1.0: CMMI7 003.002
%%Title: CMMI7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI7 known{/CMMI7 findfont dup/UniqueID known{dup
/UniqueID get 5087382 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI7 def
/FontBBox {-1 -250 1171 750 }readonly def
/UniqueID 5087382 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI7.) readonly def
/FullName (CMMI7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 77 /M put
dup 117 /u put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBBAAB71645535A2B
6F0F22458E1429F4A67307E01F0BCF6F337E0E2AD89658D880B04C26306F8179
C8121B958459B923AC3B05B594D8AB95F75870019130442FD29578D44F5690BC
7281357A5041C8A809A59D0DEE108E2A07D406656BC74A9F3317CB887E712318
46B2ECAA341F8692ACC2D14ABABDFBCAC6F35858355F1D3228B0223EC73AC56F
3C987464DB829F243E304F4C59CDE3EF6EB53A4EF9BA91510CB89A3407261F58
A2AE66880BA98FC1EF546112892494C85A2C39F9DCCAC5766725894A7AA148E9
42360AE64BF3A4F1F9F0A0D0C1AAFDC4D50C52233AA595B7D0CE557D4A010D86
6E6B76A7E9523E8A6633DA9348BC3F59302F72F492A30782AE7EF220516893D3
DE836CDE311DED9262AF01C506040541EE84AAC539B404B23033EF56D4BCE6BE
B05F79CD633FE75C6728114D2749E39FD7454050F67763AB636377BA8E1867C3
996C7D7D4A4A02BC49D1AD7FF174C1F49F1F205BC9D5AE42BCB02CF8554E8F5A
D1876C9285B6CCD7B8C165F75843B0AA11D8462B57077AFE75BAD086E9D9F91E
30ACFF91776132F3CACAD1CA5E08B17B36A0E45ACBAC52393B9AF9089BD821D9
CD5A9CD9BECA59F7445D63DECC1B4502D299DB85B6E2EE7C69A1DAB91E22A3A5
89B524FA20AF6005E7A586B90A2C6E5A93C9EFA4ABEF5F7E4C7B81363FE8D2B3
0AD637FA863DE787581ADD7CBE463F7866C40F4E280260ED0E9C8453E5C7E668
FFF058B9742DD3F131C264F8FA102CD0DA05F3114D13D34D422799181453FE23
2FC6EFB01BE420C930B879D671F3DFB036197874725220644A5A52DFB467BB75
8089E4F40CE9401777B9FE1D0AEE02E782A6EB2A185A454AE9394094CDFE7CFA
C03C23A78EAF242E4F811E4C83B59EF4DC5ACE4AD37B41616B46C263358710B2
6137314545CA6CE89119B42A3518EC85C68DC07D26839C68B1FF55C4A9CD518B
A1FB32F9C475BB6110839FCCB94156E7B3648F27245A00D2966FC4DDE3996BFA
F463A663CB6935B596B1582ED0ABBC648AAA8A86068BF0038001C753C8BAFA0D
2058041DFA720B528E2D4B16196DB1CF30C779D3F4800FE662D5B60B208341F2
A66EFCB8448C2FCD12DF0DD899911A8BD96C9B670054D328790E5D388518B146
8CE92E368EB1DB3CAAFCA4834CC9D9D9DCC80FB1F34F39DACDE643052C977A7E
A95C5FA8DFED9B4DCE769E4E46256D6DA8FB18FD7FA4E4CED5D486803538F3B4
6D3F5B3C03184F5C26C66DBB4C724918EBB6A89C4602E4EDDA81EEE2BD18B683
FDB459F2CE0A9CED23DC208EAA8BEDB304B00E093DEE926A7B32FDB2EC70DD85
94B9137856DDDABB402B2C76DBA87149051ADC6007018EBDD571BE1D092EBD95
76D4E063AD7D5F62E6C26EDB88D38678F2806A1F4900B0ABC4ED034A818119A4
E618F1A902315BC98F26775E59555A3DCEA1D0F8B20A9084920ECBE3F7F245AC
1182A40B518B194669D95DE968542BFF80FDC89669BC256C44CB66A2AB8CD7A9
E42C69956CCB6BDE8C09AD22EF3196939B3B84EB23A6E071A36D702909E019FF
058F27562441EB5CAE87A4407F67C4390810BE89BBE867D636468E73677B84C8
5A1228DD7DC8EADA221B1BAD5F43E832F20ADE7ADBFF170AB306F5B711816FD1
39B7882556E30F002977FB88D8B28826A75DE0D20354A2D41F2DA8578376F7DD
F27B0F59D4DDDF5790E11E3957491DC74EEB7625CA49FAD90FA47AD8E0BDE824
FF326A84846A47A21B70FA549BEE307F9C6970009F963B49A504F0115777826F
1D81203F655C242FFF15BA97E3BDDFBF435B10E74CE8543C98966223818839B3
6BF3BC63F882B0AD0FDACA8C56A570277952E1D83F18BEDF084D2AC004E2B09D
70DE1740D7D220E92B54D2FD0DDEAF1E08C41FD321A8D474982DD105B23166A7
AA9E0129DC88065B1E0F9382BEB4B4E1DAAE3EA5489BDCA921AD5A8175F2841F
9400478DFA99C5E5553F383882664D73FBDFA29BF32E52C28DCE80DAF4839434
022FA515679DBC13FE98968D2894DF5DD69C49BD23D00F5D858B69D1F220F968
F0700E13873579B3CFB658972098DC61F1DD580105BC27795DB4AF11A871CCD6
2E1B9AF7F0DAAD4CE315379A7B42CECB983DAC5A2B9426B4E5E0A7F7978504C1
DD7E30063AE3CBDFB24EA2BCCDC478AB82084FD30A4793F4707D9F8F9647B413
F8A5C5AC6D5EA0E35628CE1096A434FB8286F4617CB4D0AD30A4A0B255A5A356
25AA5A947FD3C4FA44B4AA80BAB44C48CC1E2C6D0A711365A37A58C3483D07ED
301A83D2650A2E8CBA9EE62FF5C2736EC82C1402959F64527F9B640619F112D9
8E0F4A8A3078C72ACF3F34AD855AA4008C96E30D9E8C414607C34E06E29AC5B9
2EE5DDB823E8C3EEE6A8DE228313D476A7F39B5DFBFBDEDDF7C45C1C88EE6D01
7FB4F7BB2CBBD5DF7F0CBD98DC287FA6940FBFE1B3B136613A3CF16634CA7B90
53D5FD5776515EFF5D37F8FCC62D8BEC8EE2216503D54D6F2032D3C2BF861E15
FD1B45B71576F15852EEA65DD372E911EF4CC18283CD2FF4196A3F1A9D81137F
F1820EC604D6C61AF318C6C5AB6DA1EDF305CADEF7CC0183B86D31310A09972C
A4BC37D110C77ECCA614D1A281EE1C2040B4A5ECB31A3FC61760F608E44332D1
D2C53C7891B505A3020E9E4915F3618588FCEC80B9ECC5E637D8D0F3C94B1F2A
C53FC46CAE0AFAA7E12266C212A73AAE60199752C042BD55A5DF1CD07FBDB830
C83E7832D8554AD9C9CAEEC7CED1DAEE622090897641CF2E5B34A353D83264D4
4687522DB290D3BA927BA315EA5D25B0D7B69350C6C180AB0C322B05E01F7C7D
F2F48651567F0C1B49AF3950E43C94D78F7B184BF2946B924BC4279AED28F3A0
17A7D8B235698A516D3FB5DF0B18A422B2410C385E7E9439C6D60917EB3299AD
E31471616251FA40C9FA098109BB31A54D9C03B2F12947E4E9252A0851B81C4D
F39E7FC44752504B589C3911571B1D3EC3BD1E1807F99CED1DB20270E483A805
CA2A016E7283550D1B1D35C226FAB63F983CED41A4D02A2F228FA9EF065027B3
CC69D6F2E278C0A2D238D3A37154B0D22281F62C61D9182A69657B027BBDED64
11E261E47620602F865221A534C5A32E2BF5B93A187911A146F2E96538B47DBB
7BFA7EF406FE940F4DAD17E6E4B80C4F031D71F65657C2F5C8233EEAC68DE8A7
E1FC3055C122C1795D0C71A0284F89A9BF04837F61C9E08DB42644A490C97D34
A5D3CEE475B8D578205005A0D68AF94AD27C0E855BB8EDB74775690A4EDD6543
BCC10CF13283D6FA8A7CF3FE6C4F96470A11FF0B0160D3F9816B13B0BAE0D8F9
B84C7631063FE658D13D108D6FE24A89799FABA72E6A6D1C943922CBE676C1B6
11A4106ECB4F1A7F8A84B2783C2E6A109C58D63FC0B74D8C8A1CB62D527441AE
E656D94B1AA8581B4F07B653ED6486AAE1F8ADB30FA8D8914AF24721C74B0908
D84F2EBB91144ED4BD7EF533F2584048DEE37E17CDE5FBC2992A6F924FEBAF07
B626F988599DECDAB43C931CFECF99FC6EBB72F8E542765C26295902DFF60B7C
7B9ADDB4858BC9D808B7F0909690CF8DFBC59A786D48B891937C31A219842A43
234425B4963062DB4C4E9F534C77F4243408805B5A6B8BBF428632CA4AC03A7A
E336DD181CE0CF3E742079E2919EAFABE16A63299771BF276EFA8D85C920F995
5B9D4E8F1ADFCC5C29AA89BF90C186C5DE7679906B2FD4DB279D245D27D08837
D3A8D541FE37415B706EC585C05804108C1D938E543B8B63E275EE85CE9DD843
0A8B9163144B77DA1A552A25D5E77E94F29CF252BE9950F4E627D5F72536B6F3
3278D4A45D10759F16AE42BAE8460865FEE84537F8EC9BF4813570E883B826FD
1ABF3F4E66DB6FEF8366E07BCF290EA67D39C9D81B2A7EA48E0A228FE3D5AA50
1A56CCBF229C9AF2537A8FA70EEF41096ACED34CC7BEECA4EA1F23B39FBC39D8
CCEA93E63F508CBE6722C11467A3D0D5C4C52031DE43C449333E4295104651CE
E13B821D7904653346067E971BE0042C571ABF40C3A1079A675FE4264B784D46
1B8FAA4CDE9851C4EBF69ADF51A7B68CC8706C08D13A44909D4C1D78DB0E0B2D
0E0318304B229DD2FDC968027CDFF65722059C62154304D6F9C3F06DE22914EE
928B7D1BF1FC7E74B4D882998D59BC086AA2D4EAD0AE39F6B75B5A3FB9994506
E21731E1A15F0F2D12F88724BA72898197A80FDAC00243A3038871EBD2F2BAB1
C616278BB78490CB86F552CBE5DD0862F3793D72C68AC16AF8E38FE1A523A5FA
9B0428745B1455671CFA1F6BFBCCF9CA23C833113C2948E7A6AEFFF1A83509FF
C559BB5EE7F92BB43F7F37A371E661C826F63DD0C1B25E34A8119E71EC82FB66
23C7B126FB6554E7560B1B69F2EDBB742F3B20D1648C151C37A8570CBD330A9E
7592A8607D2D727F3AAA0FF2057DF4E2A4C7D3B658C6CED38824A770420D89E7
F6AD385DBCE9C9A9095CF0042052A67AB804A6675BB9373A99390CBDFB715984
A069DE543E4C6ADD7F1EC7A15392EF834EAB4584679A43443953427DB13E6959
0F2F5061C99C6D00FA5327FDB5330AEDE19A53DE3AE092634DC6AEEAF63A5BED
990F8A117AEB1CA0E7F7DBE02CB3D86465F1613B976D1CF6F3A1E69740A2FDC8
062ACC45EDA6B863B60015F276860FB79C31D28F97A799568E66D0A8757B2C41
E939337B467303041D0F4C59390B2E41E5F298F275DCC699D27C459ED4D5ADBD
02539F00095D7E1872862142B46BE06513D3EB1A406E6BAA64BE795122100F09
C37E5D1834218EC1D11B031C7DFC9F5AB071A8F4DC08203821366959E9191D4B
289682D915AF28CE5858F83338DC51B6B0DD052A181D9133FBA50CF18F70EE65
C33726A0450EBA9D0E0C3662AF6C2121AB7911AA9880D6BB6811D6D7515888E7
199A0E632104059A88C9D85B19BB35EDF4AB95E1515BB2339572928BD5FE8CBD
2D4DAF55DCFE29FBC4C3D56336277BA0C9A889A129F9FA7052AD1420B8705163
1A808EC1284C888D78CEA2B4BAB71AD76289F5F4986008FA9BF328E8537E6C91
E11DBDD8447E1C9ACE18DB0EC3D5742C264C8EFA445C5D16C2930FB43669774F
A2CA52144D99EFA8FC427DB4128CD4C036A8C611B087335C780740FAA419D39B
5DD68EA89C95275F9254D947EB3683D0130255269B10C6CFF29EA0BE484C9949
96188FCB747618A8044E2E37DFFD2DB8ABB621B34DC024259340677095B6937A
78EDCF508AC91D4CEFD872AD73F50582DC8807143CEB9F109C84DC5DA30B64E2
E56DE973088A9D32583D6946DB4F3523902FB1781D993B89D5F56D79D5D98CC1
7FEE73FC3A7D1BCCE90179AE450829E228B4DEAD3B2B4C79A400CFF899AB26F9
048B0875EBC871AD23BA96F88CDA8B87FE5809A13889A6AC349ABB25E54ACAA9
C213C5DE2D01BCB9CC0D7BBD384D23AE12E289FF8FDF1F611F5E14D4B20B15A3
42D9B3B37A83A9CA39B5DB6C8316C51B70F211530A56CFE54D63E88169CF5233
D1A7B2388025B3EBD2BEE0716C3A2D589EBC7A42B3DA602AC4E2FD9C9052C922
711E44408DEEA1FE0C9FD50A39AD46D437F61F284A2EFD42EF158EDD71A1486D
4865D6B5E20E60F4F4FC3D646909FF1EE2D7573665E4CD8340A1B232CAC0202C
C35BA9BB3D2267C7E78518F6711633F888EBEF72DC750AC2CB362D528CFC8B2E
A1AE1C05456F50EED8CAA768DEF47FF85C4322F02D7F9D188C6F285C674EF589
251B0B913339FD701FDB281338D96704ED7ED908BC113B4275A24D058955890B
12CCDD5572D63688426B0E1E9A40D6AAECFA5555C1CF9DBEF8C04CE1E5A63F14
969D39B6DAE8A91F6AF4CD1E2DA89A4661DA34E272B6032C442C031F081F5DF5
858F4620885773D8A2B2F5EB6DDA74C1408DF279900450E4A3E80BA9A9B1295E
F24EDC3F6EFD81A741EF74B0202820516C4FB720687BDD915EB2396128C3B262
20E3075DA153D6FD36E1C05B855929DAA4DE694B6F15EF2145C63250B24B031A
4CF0AFDB225E91D99828B83BD90F1702D3906D45872587A3A116B138AD9627CE
E778A949C392202823C670FDBC56F1896FFFFBCF52C4B400F67BA36B5FCE44A5
F18EEB8ADFC088C99DFF8E0A593E81A5ACA2E3693005F723C7D3E0AE2BDD3805
8C6007A00542DEB2539709558A88B21003CE4B2C7817AF207ED576B25A41DEA0
FC55A459BEB00ADB01309B35920F04F84B7B64F95AA99EBCB843A06CED900D99
97BEFD7CCB9F4D85876F10160C8D63E2FDE82B7A8D945F37CC9933ABE0FD1D76
268296B1A5AB06B2E814691128771694224781171DC6266BCC290FCE1AB59416
85530368115BABD4F1DE45952918D1945D51EB713C283DAE8EDD559F437CD886
A4B1DA6120D685C284673A3EE489FC1AE4297A3623B339B7D886B6B4B8F9F4A3
7BF85E320A52FDC6323B51879B98A14C33C567BC069D9B44616514EE1BE36F90
EC5FA33E1B6B0A46945D876EF0085E74935DF2560A03321861A752E59742B9FC
5C501FBC64BFB1602459885B63873DC857ED37F8BE1A9C6E9517B9BF5A6161BD
DEB6DB0381FFB34A8A96AB4AD48BEC40D4C198ABC599C3758AFF638AA75BBDA4
8545D5F95FA426FB25587301A43E176F6CED7851E815AD907F2443E70740DD2D
4FBD5D978B9B37F59D6DCF0ADD0F90825DD23558FCB858513602C8BC82BFA383
7AA6DCEA4009961D06DF233C5381A7F9541259926446B2F03664BC5978A1B6CD
EA6EBC9FE6100A65959513EEE32E69D47B55BAF30A893D77142F943982019C01
715CE29923795EA01C58A798979939B507C5B29A32881877EF7EF0C5CB3DE591
6B9A6C3F3FFA847F396A396F078860B59850BA4CA3115CA2376AEE6B30C05DC1
6F9DB6781ED0F9D45D10E096C33B1B7CD12A9D57C6E49AD833C4B093DC82811F
16B3BD902BE764A1680831EC5A6C1CED84AE0DC0A65678EA5270BF20931E6409
7AA44EACB22CCA11098F8A51096BE83A1ABA56C9EED4195D5CCF24FDAD92E823
C439DAAFBFD652157D728F2754F28304710D3CB33763156D76A259D446647A11
493FAC70DD28063A4CDDA162F72542368E1AC2826C4BFF7109208F66371910C1
068F21779FC39DE03AECF1C9FB2F417930C22791961D801284DCC89B0833B6A8
D63F153ACBFB7B7D547924613BBCCAED37D90BAC5B0264ED31C7B9DA5A2BC620
9B20CA48424D0FF58905BCD6190BF4B5FC6ECCA1BCEF13426920197CAB41C4E6
E82E8EE7BCB23C6BA6F8B58001533B225ED721D6CE3D6E89116EC33CAA6E905A
649F8C6A1AA187A48E20DB864596481976216DB78F0F57543DFAE3CDC0A6FC77
2CAA49442527A5D94DC54BE93C875690CBE52EAA4EDD9F2A511361BC0F0807EE
96AD0D26B62D809E82EC14EDB158EF48A748A6FE0C3A7EE5D4479B35425F35AD
3EC7444F6FA75CEA5011AD571078293448A33C7647611CAEE87974B0A756DAC9
4E1BA78DEE477FA59AD50BF5C52E068A5E044A4A4994D5B24CC5045F768A3C51
D4F65E2A5AFD271A7666C6835E28C60751EE528C0742433165AFBE71562A3016
F59676D56B0B5F7E4984D664BC3ADDAF24B4205752EE21D4B57057A943018466
09C3FA5D2C5BCBFC22A643586BC9E7A965DC34C0A7D76A470B0602AE45106417
0701ACD2C764DDE218B924E38B5A13CB82678372E743A8B3CC300BCBBB878978
D9847F0640A031D5E76B5AD07699C3B2FC6C1DBBF79938BA649C152FFB2B5BBA
D18B9570670B99907506494F362B124790A17D4F415D8447ECF70B67DBD46643
91AD465A1852B804CBE65206EAAA38FFD2B4180AF00DBC62903A5E59ED93861B
243B7A845469B9DC5E291C87011BB364ABF5FD618EDF8B9BB56654C1B8F9DE4C
AAC5765BA29BE454CB96FC220C6416877F7FC7E83A00C95DDD2837FC89EACA01
1707D865107E03FA31BA0E42B80C2E74729F828BB8D70B6C0BE59F0774ED725F
7EB353BA8FC599BBD61352C3B4C6B7E1001F2635D84699812D1CFE486A11EF66
8D362F300135667565F7ECF0F1D153DCBB0484D0546055F8C9CBF1895C907513
24A3D3532ADBF022EFE297A7881C10D66B153CF0A37BC0D140066F13CC6076F0
F1DC18A3693B879470322641A44EC0051AFE468C234490BFCA09A2E6503159C3
F7AEA7844F9C08F85508A48519CA7214AE68A6C939848C3AE37E4ABE2D14F46E
383B91A4D8E07640FFBFA42DA1C60FACF31CF432BA580A014B4FA1CD84077CEE
BA2091FD928B13F9AEB084ED38DAF045F2923CC236ACBBAF5F06C04D2DA9959D
FD1A016BF7E8287A1B748D7178ACCFC9DEB5DC34432B13E4A2F0D3153AFAADC7
BD0E74E4B31421248A0CBB401D24C19BB320A7941712A23012CCB6C4B1165DC8
4B5156526CD37823FD542D9B152E59171C44CE3ABC10B8FAAB42AE6CC0DE45AF
F785A5F3322C3FE15917E7BCFB8C874855B511AA2BE4C6E41514AD6B78489F43
146D8826B4097C1F70279D211E1A3A653605EE9CFB11F86884E1E92374101433
3596D7B67C4FF594BE95E6C606CA13296ED8F6B9E9B0EB10AF20F161D6DFA4A4
C260B5138D97623D1E17E9B045410593ED61621A54544F6820E62B75701B1F0B
C95769E4FAD95EB220740BE9B44BD36A8766FB3B7005EF51FD994D36898856A6
A873B20751916857B403374A347A2EA6283F7F289A40CF3A8756A349E6C8DABD
1B6739F852C395E14E7F03A5BDD0EAD8A259AC95C6EDC724714665B4C5F00990
3A278853A264BC9FC78606DBACCB48F55DAB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MnSymbol10
%!PS-AdobeFont-1.0: MnSymbol10 1.001
%%Title: MnSymbol10
%Version: 1.001
%%CreationDate: Sun Jan 14 22:38:36 2007
%%Creator: Michael Zedler
%Copyright: Design by Achim Blumensath, Conversion to pfb by Michael
%Copyright: Zedler. This font is in the public domain.
% Generated by FontForge 20070112 (http://fontforge.sf.net/)
%%EndComments
FontDirectory/MnSymbol10 known{/MnSymbol10 findfont dup/UniqueID known{dup
/UniqueID get 4337218 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MnSymbol10 def
/FontBBox {-256 -2477 2546 1546 }readonly def
/UniqueID 4337218 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (1.001) readonly def
/Notice (Design by Achim Blumensath, Conversion to pfb by Michael Zedler. This font is in the public domain.) readonly def
/FullName (MnSymbol10) readonly def
/FamilyName (MnSymbol) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3166449D69AB0542CB99558019EE
97CFE9FA87FAC14B55E860B5663A3D528CD3784FC9647A2EB72CF1AF4E31964A
3073722CB69FA5370CC5D9CDBF105662CA6188C1B3BFA7658F71EA5765A0D152
E60FD5E1DE3B99CE70C03D8CB4F775B5B17CE9573F5046E61444C0DAFD894CFE
E17604820BBE5A8FA11A10565933C0A8320DC5D116C780706E315C54E72426DD
AF1E6786D883AD182ED327CBB03C39C1A2602471C39296B7681215EC4F0E0E0B
264FBAD453DD3B1120746252532CD86196D39E72A70222F6629959071128F97F
FF711E2569D51FD1B8BDA932255AD61375E55C91BC15856CBF72FDFEECDBB0A7
FA0BCFE170E692BBB6814BC77E4A62BAA6F321D2943D9B5685A8A3FA2EF0ED16
ADA3E3EFD79D09E47C16CA9CB7889FD2081ECBC122B84D1D7B9C6F2574E183EF
D30FDC12CB02EEB28A902A9AD681A0CB417F0105CC1195638328FD66D692F561
038B6D1DA91A25D62C4F2FA0567CC2A602702D5ACD31AB1B2F2DF62A8BFFF86B
CE963BC06A18D003428200826B9F32DFB63715770424E7158480ACD9B552B869
9315CB99FDE98CCAA82D849A3CA392FA4B5B1E1241352F80C781F54767A1D3E2
B0B5C2E6A3629A60E69A8AE5F622DA49FC2BA4CDA8D02F99D64C1D59F3D6DDDE
24E18308055B332AD81382FBBA9440C0CAA10F93A5F3BF624E0AA6D8888F3E7D
9D72B7D2549F71D57A4B45D4B715A85734C37839C1902351881373CD5A91DD13
B8F087EE451B56CA1ED6B078FB0CF131556B34762304BB29ED89A7C98D0029EC
3D2C5C110BC4E3F1E1A587BF8DF76D77922A11DDD6AFF3FD02A62E288FE94203
7F03D2F128BD7D601462EDAF37C1F227D3376A0DEA296611D69BF6E92596EE09
6EF254D6D8E8A3B538B8A41CA787B090CB68120E1F993E3595848F67AE7671ED
937D2517306CE89F56E2160C1B335891AA1C07543B34F16B93BEC12C304FF407
265F948C049B4AE97A8F7DB03E1570F4D6B504AAE9B5F399688F1657E41A5F4E
EC2C9165B65FDE9BD1D15C9B9FB61FDF63C6DD6A7C060AFC6138CFF4CE3360EB
FB43D84299D33673EEC79D31671CF21CD5C0A468B562A55162095C4389C82793
B52B6C65508434965BA100F33779183066983F1FAE25FB2DA7C9803DD7A05DCF
0E4D0E0A9F0B8D4D3415222B8B81071A62AE7E7856ABEC91B8CD1DC24AC1E0C3
52DEC96F4E13E2A020BDFB10EAF186D8E92293DFA9EF72A2E4FB46159ECCAFBE
20F35A8AD87222C1628F9E83BDB1BDA7D33486570449498552A596243FBA27CD
4F9D6D60195EAC4220B7FDF85DE8F0E68D184BCF6A5C4AFD15904D68C140C6CE
231015D424451396E267DA4FEF83F58B46A22BC54F9D7BA1ABD311B1422C44EF
C191009697138B9170D8C568BE66DA5648ECE74BDA1BA604872AD6C5271FA89B
438A8B42BA0542A392A103708A7365C39717F8AF6092243A410E44CC26D3A3E0
F450318BD182CB6F86A9427475F50A079F9FA757931F47EFFD4983A7A210F258
52627F5DDCA7F73A5712FE96C9EBA74CCB40138AD0C48E1EC3203062681DFB3A
2BEBF5913DDD852CE7E525A1BDF5ADD237D911F846A5870C5C77B675F10EF346
61F1B9CD878337108EEB25F6A230DC6AB0708EA9022EADC2B4CE6CDDB4BAA9EB
C266AECA66192930CE1532B19D0EFE83937474321B7E4C63295997DD487BC7C3
44B1D6E9C29C2E65C25A7376AB0951A98F668903339F3D9B1A1CA16D9D51FFEE
F04B7AF5F38B219ACBE1A2F6AAC3F6FD242C25F6952AC55C24ED123A69EE85AA
B17B920AAB6FEC1B5DCED2A635506B1FA069835B637A6D15736C339C5BFB43AF
47577453FF94AE623C2934FCB329953875F95C55EF8381B2F5168DB2F5AE16F2
28285B627BE31FE6BEC3F374AE853CB3E51A7977AC3BFB5ED0BBBBF6414EE585
8A463D1D1546B72151B3AA708541C4671738A1E0CC16CC4016405B0E6366038F
7A17D436BF9B87FEED4792659E7EBA466BDCFF1D94F0F773B7D545F7521C2C0B
0340F42BAC76723D5EB445C3B76095A2FD5BFC3E7A8A2085E55152F2206663C7
17536ACC410871C952C783144C542046E73DAB7E352BE200322BBAF6DDD26286
94612A7791927D9E501D27DAD12D2932F016DCE03DB940B2714C6BE4DB0CC262
7A90945C9E7FE52389CAFAEAEE1C84CB28BD92DC4EDA5C72C6F813D53F1E9C37
34B81C2ADFE031AB34225D92A83374078E036FCFF098B6D259E484AE49B40542
06AF4126A23FB9D6936078F7F9222E1E2074B7116C3845EEA16B5282A7375B3C
445C622B2AF0022CA7C9CD80CAB18E2F8F36CEB9CCF1F477BDF9F1B25AF98EF0
4FD9A426060F8F94009F5573100108BE4C8F5DB698E081FD5E431E713D3FE047
C72AC613DCD7A4A26181DFED9C34F6913CB64A1329228FAA9B1E97A66B2E9B93
7B85A69977BA8352BB68ECCF7BEBDB07EA3A7D588CC01789095BDF3B45706518
41BD3A04BA1F3E668B0082724961CDD8AB05CEAD31513CD7C8840351C3BD6136
F0361F26BD3145C75C837C6FA744A9FDE44F9811361F0B5E6C8C4D85A2B9A83D
CCBECFBF3630C901B119FD2A9E94E2DD99CF4DAD690760089F9702E3D942063E
0A67AF5249EEF89C2444833F5877A8561FC3B716A8AF83B9FAEF975CAA1FF305
526C93C55879A8EA0224911F0728FB73B1C2DF5556CD46FFAC1019EEBEF54064
0ADF732D0F3522AEFAC05BB597EAF6628D2CD29E4B4DE5EEA08530E3DEBBB363
6D02AF9989AFC62E8940835751EDD0ED2C92182CE3528300002FEF053DFECF68
261DC400897B7D2C011415954373AB66CC420BDF3B63357D83C3C70DD9FC377B
4C3C632ECD4C850C57EEFF10EF406FBFC6D230CFBD8A443277B889EF7EBCF73D
C3496F6DE0DD4358B9C5D456345D3EF4E343604CC9B5C2E85261C5021625782D
7534C5486448FC86B1CD00AC242FB0ED9799170833ED035D6E315495BC07329E
152C88A05B2C0A6492CB0ACF13DA5AB57954B914ECA637ED4A18ED09F3392FA1
0B969C3B0550B11B99ACB572EDBB727155443775A76C52EC37CB7FE36EEF28B9
97BE419479CC992D0E2576D9850BC6F08AC6F1709071BF6A734F651FAB337C3E
AF5FEE2AA93FD2247029D55D9FA52D3F1188D3740805E36112CA620BE1CB7D90
71466ADB572F531D461A1FFA9FD3D5CCC64D6788FA447CA76FED1FF01067BE3A
BF9CDFA6EBDEFBCA00A47E7C02D1BB8D837D072CEE580FA9A741026FD76EF7A0
0B678243A028C9C9DCBFE53223D096351D214B3DC904C329479FB0C802511109
1F54823FDAAC9DDFDDFCC6DD106305670BC7B94A33650BA6D2C2D5C7681ABEC6
49A86E3653CBBED7FC04BC28FCF73166050117C783D9ED04E8727EF6EA9A7B37
F7F90C1B5CD30ABF10AADB614B976E736091D33F5E6D4508278FE8CB356B5B75
6FF21F5F5E1CE7CDCEE753A4F34FEA0B2C6B2E0B3D11F38AE1742B115F4FA7FD
8E330D0B86B191FF5B038064F9326ADF1CBD423F1F8D2826EC115D947300612F
36771F450D9C48289DC7F17674418D5DE5277152A0E9F790C6D0A2E6E82E6840
E51B38C4579FB953374B7EE95EEF33772ADD6BD3ABC64F28E499B59DCBD8C75A
F7E319879B5DBD7FF3FD4AE9C70527A55D3AFBE742B6C995F898E8C085E663AD
FD8D0292BE5E26D1E9CD320DB89681A5A80819BA929CCAC4B35B07FCF176C358
BBDEC36AF13AEB03F93D85B2D5703212F9A5C46A5F98C8E1BB7887E2F0C3E532
A39D8AB5FAFCA8A307DBFCD5E9907E38EB02257D7F32DDC1190AF61B7C6150E9
2E971F6A42046019E11D040BB87BBB7ECA6305D2DD2CB9B06D3122A737435305
D42DE9C6B6149AFCBC5758FF0C9116BB0D00B6E24214CDEBB2918B9E83DC8BBD
23B356B7A1488750A4D98DD7966737111078E1C7FCD757C04C263AA2A4A08D7E
08055E5B9225772F3579E050C9FEA8E1EF4F3252FD330D163CF0FF2055C07518
C027E3991325D0F2D8DA38371B463A54180C95C4C9DF1F49D41B4604264A8057
0E47C61AB12C39AEC4CC7F1EDD5CB4F89760B2E3AD1888AF21458716E41B0D34
B1C162C462433906C4A7DB04C45FD6C6AE5554C5AEFF1640292FCBCD73A9F93A
2AD55F57D783C482AD101DF51A51B1902F650D61A0914635854E9600C35CEA0E
144DCB9D160F1C260850F730290FE5BB84BF7B5086C0382E7D2547C9B47869DA
6F735671291F976CAEB601C2E73CDE30808BE614306731BB0705FF8A83B42B81
FAA45A1675EE98A1F25F640ADF732D0F3522AEFE1E73371CD3FA09466CF2D7B1
95E84B2DA1F5CC19C957F4BA53B9E976DB2E19A8E62E5AB640B072A8E2493D8F
BD50C1DB11E62A9D8E6729DBCF6DC208C10B6070BB669476C38BB5ABDAB00E57
22E22BCF382BF892C767894C0645E4718AFF4F3A1A611D47EE7B715BF06D0F86
AD70D6D1B6FD7600696818D3D3CD78604674650E4B06609B8041EDEC96437250
C43D32222BA390DB627D9C246F4A0EDAA79577580F5799C825BD4B9786473E2C
20F6F8CA93E58BACC0B12C70FFED18061145BAD931651A4B1EFCD31A5C69FC07
CB5DF5093B7CDA7F1780DEF8060D7DA7EB4214E9BF0DD2185ECC3E598C88C8D6
11168403F65AC3E75EFCED1CFDA18F88CC3A80133FECBCCBC55A4DE795983556
4F4BD7CF18486E33C6AD14424873AC44919C00D0D9FBD7BDE11F15D300A9E7DB
8EA194DA5864148B1AA7EC16C797B31B0006D964EE87B70841BBB0011D8E3D40
51981FE1313ACA0F29371954548294DE90C4CC2F9B83633DB2203ED9BF9F14DA
81F778D8802781AD3E57E1A97BFDBA7D2F9B0C79E4635A10CFB39EE250AD0FE4
0273DD6E9C7B5D8E16EB4F5B81DD222C6BF19D8EF0CC1951D3571B8D41E4680A
8FCC063278A87F78062708C3461E21B8EB085BAB7D12B3B5F1AF9C403D65CAC4
A7A40597BA40FD2B9FE2CE494C712C51556C68D920710443D51C7E09D88A81FE
4C24396BD03481BB28B03F6EC80063843F59AB6528318A5DC7648A46AFE9EAA1
7E79A2B383EE971CA26B393A98569E59FC7A33A9F31B1198C6DDD0F742D9F3A4
760004D1BBBF9DB45283B2F5631D37BDA3A5DF9DDA78F22714FB9DE80D3833DE
EC7848D7C0BC7C81221810546F0009F98531353C9A8EBFE7DB9C9A177084AEC6
6CEA7569C46F793B54259DF6C99069F162BDC1C1C67DAF6DD7825A6CBD56048B
E3943949B1CC8EA52E2E3D32218A36813CC4DA7F46810AB8F74AA464E105E8BB
C5843C9C56FF9F371C82FE3E8666A274B7837401613990B65B51E7A79809A9F6
BA5F4B34FDA033E3DD43B64385003A3C5705F7C6B2F2D6F91AC62749BD9C54F5
CD2BB88A69051E420E3781813A9E7F06D9AB28A20372A9EBF76D7402A05FF145
47300FFAB1FD3940917542682A8FD28B1EA00128B2C5D7A50545025A36185A5D
C7431F58485E40A6FD2DE5B292D97D0335BFC690BCDC1C226CC06F6274027559
A8B3843FCFFBC8C6E51250F22B81228C1F251F863683A1ACFD7164EAD511A3BC
741690938CECB34F36495811D8DE5904E67BA3B608231D2920B263DCAE655553
EDE9CCD27DE87DE93962D3CA8EAEC7980324C443DC03930F36B48779449BAC30
8C6F43FE6CA80345334BA6EB4E7CA147569CAB615C61E1FFA0ACDE99F434634A
43BE485CE2877000075D2B7ED4FF02B658FF6D958F90A32C4175B6BFB279024E
AE1B04D721A6C546812A336C627BABC4737FC72F8F4F6BB7D73551EE33D0A59E
C520FFDE29D0AF2B26F944B4DFA2FF98D118E253969DA866EAD30EF58F42E5D1
E417F4D4AC65FE25D9CD251718E6B32D8D6B2A1EA88BE25498CE71A305ACFE82
5E4F395AC0D3110CBF8F774728E4278EEC55AEB085CFE5E965C0D66A993ABAF3
4BB243BC19DE3909DA113266E7F3CAC59BA02A0CA7652FEDB14391A08D3E3406
1F97C1FE91BB4E32ECF1455DBC3E902F2AC3ED51A3B3693679F3E2BCE859A035
DF08003075C5109F898D7ECDC4623599863ADF8127F1FC35DB9CD34EBC684818
AB259FFC3ED59BA6DBBC7DEE251F5A950D0F62F276A9161DC1DDD0CECB2825CC
B577C1669626E2C87DE60D69559B3CBAB1BAF7B9C94BF929F948962B0B053166
481A602CFA2CD2F6E43B182BD85FD6FF960420E3B5F8A1C120887EEDD8FE1588
84B759AC9A551DE5D4DB804554D23C10F87841F4C0C632D8FB9D752C15D7DCE3
5C0616D2AB62148A91AF46A320A0932B65C1FF7776FC2AD3CC8496259C1C361D
CC7C29E99B5641BF3A81102D49B5ABB051053D4B875AAD89BA80630FFE3EBAD7
0FD8F2302B44FA2589DD107B8BF0DECC07116A05B5D6D42730459DD44EB86040
D02D7D100CCF30877BC31520A87BB3858F326697965CF6A32E6E372DDBEE44AA
952CA42668A93FC84298A55C55FC346BB0E37BB222FB8F4E5FEF51F9240CEEE5
D959930F960055A88EB090534CD23A881E6D86F82C0A23BD0F68062F131FEDC0
9C58253C43026E4E0F84259EED300596A23A6BF1BBDD51D96BA4A5207AF1044E
917186B7E5B411A7D7613AA7C519BCE1182B6C30F93DD0D7DEA854CAA7CBB1F8
32A94E176F8B529878D4C5E8A0F09E221767791DFFB4FF1570574EAC7E17C772
540440EA91FDE72A075D1D40A984E6E75ABA2F4AF1A7D59300C44EF4440373E4
3408A883CB2046E81CE317A0B867554FC41A151C8FFE42C9877EDD26B9DCE4C2
71C33EDB0C544D1989BA1BC7279292B2722E1893A8FBC3A7C56C89950768596B
2C529DA22A5A9F0AF66B44344F1DF681219626CB0EF402F903C70BB29D852EFC
F3751A5D80A8849721E4E81E1FEBA2728C2B0985C065194465D1DA737BE911DE
C7FB4D33DDBD1715531592F8DF58BFE58AAC895AA48D4DF04FBEA760D3604F15
6ACD003FC6AE2449B2B06CC7DAB03A023A3E5225E0377ED38749AE1F7714AE5E
1D6496E399832969147FAA363C8C06EC0F4D58005511B081A7975F4185B55E7E
81A66D846705F7C5E94EBA49FC91DB0B73188AF63CA5B2E96A88F4F9A2F5A5D4
E544B79A9F0DEA4E821067927EC46753645F880BD138BCBADAA3C47C9182FA16
1075ACABC7546CCED07147F459F299DC77F8CB8EE7E0A553ED1C167611B98529
389D46C775EDB7AEB045970F107D23215F00A7441C4EC2FCB8F10C3E372F8820
03FDC5DA687CFA43C0D1856C461F97C7AEDD65843CFE0F9AF5A1E173349F287C
BDAA4BBB6CDD4D9C26C7F67760C94ACDBD349CBD18E8CEA65C0A0AAD834DC17F
86A859D490BD6B1BFE492563525B99F0A8D519F7170FE234E05E9C82777BDE41
91AA254EDA92887905BACF518A5673B23AE113B27C840C2A5C22FB0CAAB9C888
942EACBEAC04EDAE551CBE68E84519D138C233FED4D0153C877A009E553136B9
DEED11E9048F41D76525EF6ADEFE158884B759AC9A551DE5D4DB804554D23C10
F87BD2BF6FBF7289E4F09BCF30B0A1CBC1CDF295882A6DC1E7FFE43FCF67050B
2A54A7606CC3C81329015CD41409792AB2F9CF2B71058CCD97763B6A3F95EA47
0066F36B369BD3F8B06202FF8DCD698B56544751347E9AA3520A61F4321C6361
D12879D78AC6396BC3936BD40FF1476BB60954BB201642206044F4707F3F4239
774EC5D2A536E6310FB34C7F4924377BB36BADAA5CC8F226222C66A4297507F9
00A608358F08112221AF8F6F4A4954501CBD1A5FF8C30E907C72052513A1B208
08585CACEF9C426323D491D0CF9CB9086D116D56152BCE329695FE8A830A505E
C26C11D123711C6A2D19F38115D6B386C8099A9841BC5F8829643C98362E5DFF
8D686C4C38E3197D40FD7FC1D07D1B859F13CF627ADBBC9690CA67FD00E04F48
397C63AC30C3CC71D1B6A8BBFD963C92351F4D749ED999AFED0F93C12431FF27
40DA76975D44A6AD0CA0856BC6EBDF26F58D771229C2A3A491455426500E410A
707B6EE09D45EB0453370647B615E56986C8D5E2480661F48401D6C649098831
1A5C70DB60B784FC038F6DAAC43E4045C7EFE3A8D63D2276C4236933CA08C51C
6CFF8FAE50E4780071A93BC36DFBE6029F878FC59A654615785BCDFCF607C8D8
1FAC551B3FCB526BCDB745ABA11C62B194CC32BD7E0F9B25F3B832585776052F
F4259FCEB702B8731B1DFA5DBD6CA4827C23FFE2BCADEB2F949DC6AE11026606
C6576B9697457E6FF9E0F1EB6964C2FBF17DDD7CAA51C2086D8E71C34694CF2C
4CD167F58BD2BC33BE91472583DD53F4D15F219219825BEA068392E9EC13A702
D73BDAAF6848EEACD2B66A65740087755141099AC1CB7FC61989DC798351E588
7C989E252F50035966E100E9F481AB03494BF75E70DD28D091234019D2E22482
DAB4BD53E08D9FC1A863599BCF9A717F4DC319B4B59AF3A48C93AA8B50BBA0F6
9C64A315706D38591372BADCABDBB28ABA82980EAAC6131940026E3C2297E197
FB8C82DA5FA5A9342C085C5FD2C774FDCF4DB4D49970182F408400DE02623D52
D3FC439A3F6CEB92442AA9CECE33605E82AC13268CA45E353D5F4E3378154FD0
C9971F42B1921B79BCD92436047E9CFD50943520808A6B7AD79EA9C28259422A
D260702C4419860A94D0E467A9832EFD0EA3CC53A8BAF39883AE261391BB6677
19D9F90D45174B1B57B1224E2237CE0413A464973E2730E8D19B8552B6513C80
5136253ADE278AB7B25B0AD31AAEC036756DD1CFF2B061733C8D4C355955D7C8
C2D6C002F68E91ADF39FD0483802318C52B7C24CC9AF78713A5D180673DE4AAF
745FF5F02CC49ED6DC4918B6879A73B9D49874E012EF9315FCCA90D78E299DDD
66A941CE305961546D0088C175AC3C97FCC08A6E6797D9D6D4D6794945B39D24
80451AFA10C69AD5034FC9856112429267999EA3548ED2E65D653BC28E2E7BF1
3ACA6B3BB54E58726C1DE837681B7C506EE869389888C2EB57F251F7FC770D1B
943FFC7926FF7AEDEB09DFB0B956B404C74657B72A77E33C326F23E2EDF90AA0
77E3000EA2A3FC5A51D3C1504EA11C23F1E41C94D9928885FADD5A7E59CB4287
2E6AA786FCE331531B8EA85AA74FB443296734D6B7F9A7E71D168414B0C1AF94
2753C52402014764CE7026803F091EBB159F48E34D0C2E929AEF3C8034A681E5
C185DB2E6093DB1883A21A8366EB9C6336F2FFF457422ECEBE6792F1D72C0D3F
E03EE61C774D39E1F2A3D374AB25B33CD03B4A458C70016EEACAFAE4B8CDF5BD
7760399F1F08F989523B35D16553DC9E0C7C69B2FCA88B893F926BC76BD2A8B2
15616AF611C0D7C1A57B747534B3EC85C1A110A18DB52B85705BFFBC47E7BF43
84C54C4CC3D0954E2ED533E22069931B83B3329DDDD044BD3C3C36FABC9898C3
9E5504B85F39D796E5291351AE1CD2BD437656EE331C267DE0E24179E719D667
4DBBB512BA97E4085C23730AAE30044701CF8C14B23128617137DD98E2016A73
BA08C91939932A1BCE4E729459C43A6F09D8EFEFF6C02E518E6B92487DC47818
C92555B5FA22B8E2D726EBDC077F50EEEFD5C01936F03C32E26E9752568586AF
8F68C0395B297F9E0109F63E133F299913389EB6F670BA5FDBFCF3E60E693324
4B839FA71A9FCF98F4F9501DCF69FCD87041A02C81EAECB37AB76656162E5018
D71033BC87D2260EED29A192447C159A816D12852E2B90ECBE12C6569D8C74F7
D8FF65DC9DB6BBDF97D2BB770E40A750069F211366E2A4A42DE5A4D7E55250C5
2AB385EA99E840668B443F84071BCB3FA82780691BB952D29ACC6130A67E565A
CD17F1D2D44E015B5FFC2A9FBB35BD31722B422FEF7C3BA5484CC6C201DF87F0
F105C79882D6161597830379C9991921667A93C1493DBA2ED817301E6A2B3EBC
604457D8894876F46A2A4BAC73AD3C0FD804C49181CA96F2DF8EF298786806E9
159B3578C98AE81C073AD4F4A6E8F481AB03494BF75E70DD28D091234019D2E2
2482D179BCEA52B0C480AA4A7B456EED703C27AECEDCFF8E8EA1330785292383
42C32A4B81788C31E62BA0614BA5DEFDCD74B1477B93807D36B8C8B29B24B3ED
EBB7657AAD8F26A3FD7C28917CFB4D3B4587CBF59A38C4418DC669FD856F5BF2
EEE29043AE119301A177029DA47528071742583C00360A382EF21A8DD920396F
7F52B7D55F1451A5EC414E0B3A1A6C53FC6B951CE935ABC955B81948C7CE61A9
AD9FE92290D6A0B3D5AE24E25393D501AA2A5A6C85EA00525372BDE229F1BC27
7751454170B6DBCCE2A8F47D149B38A0D7E4E4342CFDD22C780278D973C9C7EB
FCFB1E1F43E822EE2721E984E4FFF861E8489070D09F862633F80AA1938F0353
103DB83CCF9143F3A1A259109B31AF7034155870747FCA1150FF64B719550BB2
E1387A4F85B11AC1806B4526F23484D8B72BB65CDD6751DFD7C14095298EDCFA
5A018474F811BAA904267AA234D61F47078FEBC262C5E48B2E6766322DBC0244
B07C83304017BAA39283C14E3AE66A14DAFFE2CD87485598657E31D1B41083C4
EF1A12393A13991EBE5777AFDE965E66AEE4F2810BDF9DB93C5466961AB212A8
520DB33A0CA864FC2FD52A7DFDC782E94787CAD9B657C53F197D8E243D305D41
32793CDF8DB01750F4DFB79975EAD0E1E5B59117411197AA294D99144EF52364
BBEF00969C9DC83851E8F9884F5B9A2F3F1394036A363889F9FF0A06F672FC78
896C3B6ED29920B9005DFB92A3D4E10D331FA74E0EA22D12EC3B15060C553536
AFA1AB550740F72F350BBFE7129B8FC87B571B2F7CF7AE4BA146ECD84F05811F
0740415B51E89FC1E4887D1912C7FFB218D23A09C5303975072DBF6F165C75EB
8F0A6391B0E5060513F35E6001A3C4BC74CE6EE6409F66D517503270F802BA8A
EFD13F1A0044B5A38537EA95461EEA1A3CC7BC94693A41906A5C032629C85724
CC1B73E3AB241E4E95C8D832D54A4CE045BA4664FA7011D8BDCCEEBD4D5FD86A
6DB5F3042D2AD2B24A76AB48A5F30BA8F41A4BC3C8794BD9AA522D04D05046DE
4B8AA759050A4CD64E67D56C072AA2CC7AFB47225F6D9519498F979AB08B72AB
42EC156FAAD3A463B616725FB7745CBB094CB3607C6ECA114DD0D96A3017A579
13CDD7960CD3DCE6FDC0579AD9AF1AD861D64D89C40665A7A04E67EEDAB23720
8133A84721D9FBFA5D6144F4E38ADD0EDC240662FB553E583C4694CC3FD697EF
45C542582B6F56F890EC5EE8DD9D075383DB6B679F4F58E4908EFA20B7551C67
CB65DFB3A6A4F465C8D95B400620E9AF4EE88CE2F79FFC9789586711C656C4FD
B561998935167338ABDBF7E8DDAFFFC3D0003ED5214634D031967AEF5E1D41A8
DBF2D5BEB908CC73E806961D40B0571439E5AF3F9C520E811EDED8DA4E014B88
F9588A6AD12C95E35E48F94F97079164273D164E1380D288B10A9E09D504E360
902F0680AC09575B8AD8AD4492EB834B271794C994A3F9821E4E9B9023B08C7C
E8D1A161D05224C9DBA79A84DC57C2EBDA8E422A9550A2EA7D7A30F27565EF2D
8812D285B9B59F8C8A49FB435D413FFB45B8CC39EADC00F42AAD7BDCE1D80995
284AE92346170B1B6C248A2226C150F1A6D05B80BD40CFD211AEB3B66C0D7683
9FA5D28C5890E78A09AB656294A1B17ACDC10A628121B6317FB8E40E11E48E61
DC6DB3FD911238657559B9F38F17E3877053BCC3F004DB440C37234FFE36ADA8
040378EF40B3A93AA01DF86760FA5C65BF58A127A732A3BF9A4A7C6360A1A4A0
5EBEEBC69CABCDD80855F10EC2A5B36B8A1F0C6CADA9B905F3246AEC0CFA5E02
DA9A69AE9D4255FDFCE29059393B889F479A2D3543C9C6763A9B86752AF24A30
5C366150DFACB4A332E77DBA69DDA29E77F9419E4E98666752ECFBE462E14786
27B247336EC4A4BE51FD2D46AAF949735EB63C17C627DCC37405ACB1E7F09987
40F627B096F2BC91AFF565EE7B9FE9EC261DD7DD623E52C79EAE69CBA9DC280B
3C3EFEE631826A96B840649848D40574931AA278F716A93085913B63E6969C1A
2E0A8226817F537D50344486533B329D6339FB76BD776FFBE44A0D870B50D5C0
8E42C2790A96D32ACA3A0D44585E55AFD968135F6492A9381FA07C7195F73AA2
A50EA7671125D3AB854DDD7DC1FFFC25B2D4FF491FF07CBB06A3CA7C3F21222A
D7E0721D9B29B8EB7F71AB81A3D6CC3E039BD09697734840F8BD0B8DAFCB44B1
D6E9C29C2E65C25A7376AB0951A98F668902053D274FC07F7FE1882981EBBDAF
C05F74815937CB066F81FF58BD0E3ACAC93C4FFBEBC6007D613F23E810E649FA
C24F0C307E4633954DE17FBFA6BC4F5AAE6D6DB74013F1B55B5750909EE5A963
1E04F67D31EA5D4BF66CC631CA9B4F60CA8D75878FE4BC40C0ADCB09448C465B
386F6B890F72473F24F37CDE6ED8050A9C99E9CEA17DEE1AEFC05BD25D51283D
153D8785DD1AD632A308872F90AA36B443B92E158AF667638543A1C25BD46A6A
372031BF951A7063B1F2970CFEE5429A5B40AB52A3B20DA49D283368F8CA936A
6B93DE729493EDC6FFEE039CDB833DCA465C0AD128085AE31D620480D82B5151
EABE73523E82ED70F659C90D99E1000D0BFB5359042CD7CD3432DCB3132BF879
58F958B10401452DE8670512AE5AA12E88B020D3517AA2725F29A668466E60F4
B88FD73A25CCE2000CCC3D0304E8E18BCB399923CAAD1FA80328613DCA7F3CC9
ABEADA0440A13599261073FC8F97CCFBF000D5AD76C475C8B93982A7EDA204C5
670C1293418EBC46840F31ED8235C81796D53D084C8941050877519219B2191E
44A1EABF0254FBF5D937372278CD89425AC6A92B058E8DFD8D71077571051F78
E2F19FC9A2805325F934DE7B063AF9CCD4063B8984C3889F9DDAAA2086E7D347
92036E9EE705C681971C9CA65FDEA97EBFFC01B4B0E38C8B94E3A541677336CE
9CB590A8ABE634D07B0846A2887016645FFDB0B1EEC921620E668D20A9C04B43
955A9A764305158EB48AF7F083C7851D5328D6D205F19A64874720B92014405A
D0EF2B7E4FB2E203561018F0CE76881DAA9AEB426146DBAF38651053E5EAE46A
F5F5F193EB8F77266B06B756BACEB5FCD36A0F153536DAD78AFE75DA8B93ABA6
5E2850482F26B1DB6D70B1A52B91FB3C646D7B9B1A8838AD07317657050B5050
70A9C4DE98D5CA78C388FDC131444CCE5F7F1A98BB3A8572F20EF1C158413ED3
56ADE5722268FD35BA41E530CD238D7A64AB9FED1D0AD9A06DB0B3D5F5707EBE
31FE7F66E30BAD2404112F7F09E24144CE3A48B8022207EC5890EA64DE54C795
3EC2E8851AA373EE1682F2D3A143D6F33CD930DFDAE0FE3163D21EE42DA19A0B
1C9EA92525A7658E1483F006F5D076592306D8BC30833BD11CF1198C51BE09B4
B5ACE3B82F4A439AF0F1B4D45E4DB17DA98F338822AB024EBE476AFB688358F1
95BDCDEBAB71622D0A07E882FF59AFA08A933B05135FF872432977E2F106ED93
EFEF8AD57741D48EC01A688FB6A7E95A5099DC8F7DC87CDE74F976671BD65F86
9D2D389DB0D75797A8D577CAC5449DA6195FEF30511D5C87876C863364CE4B08
9A976F999694D7BE2DB024F9A283E12327A26FFA9F875020231D86C642785FE3
A19CBF0E048FFD58759987EDFF2D5196865FD7FAE5D4A8967A0317329CFC4FDD
AB7414D018CE8212D3CDFF8645F0BE1E25404BF8131379A057266484C24DCA1C
B15E82286A1A7FAC8FB6B47C80B4555FE3460004B12CDCB2FF190C5218260AD5
50106FF1EC54033EA2B3E2FFCF9AB319C9F3BCA04911B77B657C0E6ED9083BD2
ED620E6066CE322A34927B8BCD0708A1B45270B2657B79FEBEBB6D10180E9B5F
6CB91C8ED4E24B5E8CED2CA53E7FF21E598B73BD532DF4D9AFBC409178AE6286
4999F493CEAAB36A6F25C04968AA801A46BCA9E0AE09660024B9DD96A135DE24
B41E07EB960FFB6B386EC6CEDA031BFEC6663C275934BF33671BD55C838F4ABD
354CD811399D2282BEDAE14864E48C57D0F833DEB0CF2061E779368F7D57187F
0828675A52382D41DE6CD9FB52296A01BFE7C4F91333D6CD3899778644A33617
B764922640EDB01E827F8AC87AC0DF394D385E81DCFC02B7C16BFF33182E2BB2
53BCDA0B89BA1436D90E16006762D517F9E7E8E17902A5728F9AEFC3DB3E81B5
EB263B9677474FA76334B97295BFA4099D149EE93FBCC6272AF549BAB46D89AD
428BF4E1035E92E55FB21E639AF66E6A3A5228CEDAC4B5EEFD6E6F284597DC10
16F2D7502E91FD725ABC745478EBEEEAE799E3F0391DC6E5BA2C45BA39018072
4CF7213C1D22AB8C5F24DCDE8F5BD88CC2F21D2D60EDD604C6018E7285C9712F
76BFD82B5151EABE735547FC714BD4DAF84CFE5022302D8D80AE9DC26D00BBE2
9C0B9EC8C6A5E352C6081C7499C62B1B92480E59630730DDC9095D7288271EFE
70A060DE73CBF059D2A80F128542C644DA4F97056AE238AE68366A59B63E74FC
255EC2F683422F93DB1A210C6917BB6A04E89C45507BE1B3DEBDE88FB396525A
0A9D0F8A755C82F37F33A68B06CE6AA91195B48B8568FD9FD11EDC99325102F0
7E88656D5D5FAF743FBD4D219AD9426EB21FDF7EF88482CF7D355C42EB661511
365081CC4B5746D7DAA3C8C73B78F1F1020E4BC9748F5423ADD67C1631E60F3E
687ED7D9A4A20559897CBF7F8B7139ADF77EC4DA414C2CC5424CBACCAF7320EF
ECDF6B1C287FA48581CF4FB723E2238AB55D3E9EB1D7893DF52D57BD6C1A6B74
4024CFC65AAF32058FCFF9A5DC0B4586C3992FC53F1ED102E969CCE27E888E28
E0F2AD7CE0FEE3CAD755AC23964FB3A0FE97C122FF7C50E97BD02496F62FB077
8169721B3F1714B1B627B2ACC0D1A36A573708C2EC010028C55D9D6688C530AC
52C08C2EA7E6A19A68B64EAF236A3468C0F9453189A789D59BA1AD4D40E8251B
828BDBA6087CA9889B31AA8DDAC8B19CDA8EC4D2120A75F8FBE6B0D64D790962
33696D4F519C647AC14E7625D8FF646D135BF584D4963DC3D1E07F756273333E
84F341637A1BDB292EADD055C97C8B8528158134359B08B66C67CAFF0AF3E4D3
93CB671643892F18AE4EAE035C8E95661CBEBF373488BA0ECC24CDAAE0DADA17
371D616CC087DBA8854E4A1372610EFDE620BDDD67D0110B8331410F1DCF9E65
E7338B42FFA65427E508B581D7F48C1526E3672371C6DEB96170BC47D30F9B3E
E1860D5F11A241C4889FC8C0F634CABABB7EEA9A7B114110F3599D8E6CB9E93D
141668D361EB443ACC5237EB3E37FC4FCE8F9492E884E432F5332C61623AA4B2
D4063F144C89C4FF35EF81584ACAD95CAB483C9738F37A3843716F052D31C822
DCDF6415E2E933F65C28DA080BB80EA0AEE1C117EA3E79D5ECB5C4F6FC227AA0
AB0C3EE2F3B97181AEDC88F1D875E5523F3D2AFF38680CF8E3AA4828CB103799
D5A8121BFD5C984F519BECDCBDD0831B58CDCD3666FA965479B2A5F85AFA549B
EE2B6424E9CEA0F386D14195BEEFB3B9A269A587593874C116232876F04BF1B1
80B36040D8AF94F0747C51AF4684910EB842436D3B6DB6ED212E9BFFEDA7D395
8C62CD9F44BD3C5C31CE1626D8F34E8C84F801CFC922AA636F3B3CA5C1C86DD2
43AAEBCAA2D59460B39F1849B4837578BEA7D317ED913A28706B538D197B7D62
B6143DB7A1CF03CCDFF2DAB3612678BF24A2450F6E99DE896F7F3E42DB4A3E71
4C90B76219991D21E34C2E2089A27762BAA277DE06AB2BE566E420A2B0A885D3
236982543BA9F609463EB0DF014785240013A05FB9262024E28822E7347A9702
758247355868BD41CD7D18A25093E80B6B407F82F1F025EEDB5A9E09F469071B
B0F203F5D8ACB7A816007831D6A6987F93E9FFC2486A7512E11970FE4972A46C
8808A1123723667CAA346973A0F5066F1FE1971379E7219865D17659F0393B34
E72CE680042CA683B123A05083902153C07311290983DE2D68D10F8012155124
9FFA80BFD177DA5905E8B396E7492E95B9E76C94149A3F18A36EEF31C75CCC59
6B82EDF5BAED377DC4C941943909E4769B82A625B0F2987083E1BEC613BCCB76
3A2325981B0AF570A4249E88B67A19036F9CA8F73D54F2F5ECFCAE343200C869
DDC5AAE04253AC240F7A64999F24219600AB45EE3DCB18B1DF5F8B1351F39778
13674AA6FA7C2D18F7288C9ED1C9D6B0EA1CC70460A406C10DEEF830FE3D71D3
A53CA653BF2735125CEB2D1605B65B5550F3ACF16572A6AB06A98D112379C8DE
23C75AF530BBACF73C51FC875454D0ACA65E00257C0BEAA1EF3FB862F9AF7F1B
3E480C41EB8241AB194C0896546D749C97906939EE17691DA4ECED7ED682C4F2
5565C1413FD1BF86816439CDD3A71BA2D3F48A9951FD6B2822789384F7D9EE87
5C8D78E8F130575910EC324FD2DF976CFC21F029256E247E258400BCE4FCAF84
CD0C31F145EDF5AD4A686AD31DD578A6FA8FA13E04D067B55F84954495EA3D40
E2620F8E8B7182D08C0D5622CDEE56212D57F9F2F1D127CDBC640F6572393B8F
51227D876CFA92E57CF66198F1F50E3CC5BF1502696A2FC6C88A96AA853B4D07
B9843C0C4F56EABDD6EA2816A459C8B82D140344608E6AA9578B2505CE4E7669
223B8AFE23F85D9165C80A576EDAEB5562EEB31FF49F512CEFB665519E7E1450
E00BB9D027984055B758A3ED81F506337B1557E44C36771D1B98B28E6236426A
89AB1E4645EB7D12711D6D0BE1447331EDED698BC530A51A39517525CAA863A3
42704D9D21793E55132B9C12CB091E26BAA32F2A94D9355ECCF69B6298116DF6
1E574342921EDC0E92540B3ED12733318B4F1C322E583131CEA9B6FAEA005024
E1131560A114C4614E859D4D3BEC56BD4F13FF4C4591E25F7CEEE3CDE1B6BFF5
4F57A737C170B40EF60FC0E004BF9098CB4937BD16D69C5AACBDD6063EA6A439
F193E4F6C5107BA9B47ADDAB87D35514B4C0829316E7B9879BD8F6BA8BD4D92D
ACE0A7B4068772E5278DC1215183569F9CD27FAE20F3ADFDE37CC5A8BFA27004
F390A9E7BC965587A17B1B815B966A2F82D27A9DE7D80DC986174F22AD54D4F8
AF4636303DDD37A8AA4709C1A1F828B222BF0ABCE3D61836E7D79DE62BCBF08F
883DC5E7C0AE5E22C693F3E8DB557C4E8C34903DA01C0392D34BF377544B99DB
763DCB95B59AC50950FE544F7C3F2BAD81C23180F7A99057A332BBC01217DD58
5C9FAD7B6C7AE9040DFAB4486A323564922DBDFDAC35CB538AE2C6E1BD11ED4B
5B877E468A5EC54C6E8CCEA16FC07D58F6AD35B345B8DD1696196C978D942161
A04F980337A295BDC869ACEF32FF5424EC1C28487B7D93628E039E14526B19E4
EC111D6AB15A2B0A06DB37A8BE36083562CA8E19101904A5278F5A62492E44D2
391EBD6625AEEDB22442CCEB84056693B358104A8A07D01FED1C41DF02B2C160
2C3D7633DC26D96B40352CE5639C332E3BA1870AFEDB7D89806A7A3A04F2C54B
7E3C97C358D17AFCAC9A7E589DC48B79342C2D45390FC5BDBA02984255C5BB9F
7FB26DA3444238CC33E2791CABC1DCD0BFC5903407F4C015F22DE6C9243D2CAA
A5ABF67ABEE3A6F1FE339BCE04909D84FBB1F2A480255E94AB79495771AADE7C
298E5E300A394A9E1DD257A096A966C527C855E4F890F64FEEF39CF2DFF49E3A
9A25496738EA0E3A812046E985361F25C8B259B082B92D137F81811DBECAF888
4CE5EB17493F0396CEF43BFA8203807C238B1116F23056581AF195CF03E794D8
7502CD2BA63EAA5B1F92822650AA560028155EEE6FCF95F2CB0E3097CBC8CED7
28F19655034216407B22A304F0A7E2E08897D14EA190CC4AACDAFB45A2F385A8
4BB64B27DA576A7BD8350C2860903768B5BECCE84F57DEB5F09D18EC72724D2D
BC00F284232B5101FA3EEDB73500B7AB35DD7F93E4DF60BA3212781D151BD829
68B0B15A5FFB4EA63944C6C33736FAF32519D20EB82747C47F18DC8514590030
5F3881436FF377B7675063A2B3BD3FA2B3E0E04ED9832582F5515AF395D924F3
0C7E7C01CED707EE94B2DC85BC6194F40584E51AEDF6820E69D5CC3D80B28344
16E19C17F6D8445E9BD35422B85C36411BAB3D72DC17FA6DA648A6E95484ABEC
06772992CC43893291BDCEA2DBB162B85E7721ED73B57F4CBCB931F9ADB92E0D
61990B09C6A749C3666C662D0CDAE87B801C0C536C101AA0D77A3B65651CDF73
AB3BF2BAD0740A8A4986EEFBCD407D7FE3FA254567784CC39E7412C49F5A4D5B
093C97A469BE32DEB307102A920EB8F10668A8CCCC9DB2CF6CEEE7B2D6E24ADD
3F88AD3FD3C41457BD80F5D49FF26884CDFA635C7ABD23648940E64C4DBEFD7F
9A354A8C3592B6B7C3975718BD9894D7AB691726819D04F3A68E45B06D019599
8E840EF627A9B33B073D9EDA2B181D5A6F82071BD5D814AA6BA074FE37CE6941
F05ABB349E75AAE8B306CEE64EC4905F7D57C879F6EB96BB55BF5157FD090857
30695ADEFF8E2ED0F815AF894B558561839D7F33962AA01C1302C9264BB2460E
335CD8916D3E3F77050830483CF6D2EC93806145DB0FE6EC50B444E7BE8F8EEA
A651DCCEC032C7FCDC11399D2282BEDAE14864E48C57D0F833DEB0CF206032F7
67E4972D6BC1206AE144FDA6C03120F6891A4FFDC7B244532245117DF5BF0C4F
6527B2A51C297491493479E785839038CCCDC8A77458E3291269248EC598904F
2ABA1A128F9E029E464E1E3637231F4A07102DE80EA8366C985999B648A29114
BEB6794EF818060F4C05089C1CF2862F2CAE2F8B6A8DB26A1287AB3DD941A92A
C57B395D7132E35C90510B2EF00505D58569F35E0F24A3837E7FA2DBE0E10AC0
09677247D81DE4C1C11ED538F0FCA5E3EF0596D5BD57D23639B1D82F04AB2B64
EC307C8ABA99DBC17E8CDAF6DD7B3F01AE728211B0CCB196A466FB28BB3A7349
CE7BAC7CD903D0AAFEEB0DD8B306E7A359018A7BBF8E4801DA35056CA00B0CEE
D0050C709C5D59E0C540D5161E29D8F48248F12BC8F71E5D13743E2D37933A0F
5D7371427BAC81B31A8092A80B169FF26E47B44072E1FF727EDA4DB5C687282A
10D31D881F6C47B29D5BE5810F201E3B2C79E92012950167935869EC0E788AA5
4063C34B4A35F4C22A9D5DA38201D661E68CF48FC6F115395E7BEF91C97ADB86
AE079BF5ACD30A86AA9562B5721A0FB87BBE7530ED3C037A517E7F4D92C7AB7B
DFF85FBC8B632D158A299E13B3FD58F627B164A6E78D6A838E0168E486DB5D57
149B3280CBA72B340615323261E93B5DB3E3B467204B770A5088DB16D83CA130
3AF9416FC7E0AF90ECD2A3E0234F7E78504401627ACDC2FB03620CCB3E4E5BF0
A3151004FDD30F9F772DFF813061DBF3D3E3D2947353648C62BCFD951918E3C3
8FC1840CA02E5C3478C47BF8F0EDFC4ABF84F6030D887AC6A64DBA9A944EB87C
14221EFB3A7EA319B4EA0EC773D5C91450F25EF475DBBEB205EC6A898F6F7E3E
0D97E46E70E35DC10EF6322A8A21DD980D540792F54667A6C5F4E7C7B3498F74
F609DDBB9635FA05510DDEE9C650C13A327B57B5D35C8DE0627CA7548FBA62F3
6118324BDEDB4810B24CC2809358F98D672E0262522F9EBCFA1387594F69478A
9BB607B8D6E267243EFD320E2E52173E513BD9A8C89AEDADE9D0697AF1F8426A
6927D11568D3145B52CE849D3217A45DC6A679FDB1CE311BB051D5C727C72CEE
91D5C5E4B5575F5FB13461FBF9606133FA94413F30F3EFBF530C1917A4F87FF7
F363B07C255B5668BCC41318780CFC94BBB4DBBFE13B37FEC33DF3B23FC7BFED
A3E59E5F6E5FF90C7382C8BFA25B7A648D21067F8F5DF8B21E45EF3A42571D12
8FD0EAFFB955EB75BD8C8B15B6958A47283186D67327CD487B978FD50D9BCA25
08355C51BFE3D4CF36A6E4AB567E41FEAFAA5F39269A9DBE9A143096997BDAE4
EF14F9E60E487517C8ECCA81ED1DCF60CA0030F7AEC84C4D7EE11BFC90EAC5CF
755173A99C326D069ECF7515A0F23D18B36684FFE56A55E18E0B8D3BA4F2554A
064C537794568090C18DEFB980018F369F44A5C8BB6E6E5C1EDB206222974F0D
7417CDE937FC52E62CAAB10FD7EC61BF69D36ECE3C13C6069C64B22F44641CD1
BB64BF892EFA6AFBE9077095AE36C2D6BA7DA12117665349522715A6B6AF9510
07027352BC7C9612CFCE80D9A3D131971EC182E6F85D3E166976A1AAAB6BE714
306533F7AC4435D31FBC2C8ADD9DCBFF350BE43806697DB0CEC64F1C0C61A3CA
481CE5D74B8D57712E5A88581B05D973D05F42D3E371304227EC703D42B4C106
4DD957F1B4BA15AD718CC5E605CD6C3C5A46E851536CDDCF47720EEE7E8463FF
F7B0A03F7B5931AB2418F069ED522AD535B5B88C188D46282036EF183AC810D4
2A2265F895C039D0E0541B9100595D24202DE22DE3D1C72ED10793EB82568588
B9A6F0330D35F65509BDD99A537F5C95D0F22E89E0F168D4D12950FA0B17EBE7
E676C5E99F01E9F9856EDA46B729E72BE7798A9B8761893C79F1BA23D5F47FD6
3870B38E4100D67ACF9EB4C072D3196F99FB0C4557ACF1AB49D651BA461A600C
56EAB620D9380D5B2DB01CCA6555DA1A22700A87C2999DDE579B60444EA83574
EEA1B900DCA5B54A71495EBECDFD0353655C34FB83768739DB3544C74E73E2FA
427B8359F34D058E78A19350F0E59E892A0218B886FA4F9B7AD41755E9BDA7AB
D251D351DFCA7FAFF1EA78D0D6FD12743F6BC297629A4E0D4869F16F458083B6
08409F1BC136BE8BE912F59E540C09604AB40535E4200380CBDCA96015D3822C
F62393BCDA109DD7181880277CB69B8FC62FB350D208B443AB6AE477C72E6CDA
1458BC8DB8E1DA62D42F448933949A2441732EC66D4BB0A88B525B2DA2E5894B
B6597DE71F19FFD0226D540527F178815DA109C80D6CC9DDDAEC57FCB40CCF15
567797367A96A03D3AC106E06F828E94BBC41437D6B136DFE42B145626CDD287
909F4E902B1459DCF3C1DAA7F1FE10CDF6C081F3345BB234239D342521B8AB0F
671B02BA487CF6B588EBECD26F9BB7E8DE0B8C476E22C61E323845F40614C39B
453620EB9D20660E46E91FF7CEE32749C91435CB06331F25F4F0DEBA629063D6
02B666A82EFE254436F63898712D63BCE010820AD0E34687DBF7EC1ACECFF6C2
490C6C463524FCFB9E44A5713A4C13ECA61A8D261B3A74307AAC38B50C0E5525
B50473B4F25EA15E67C07A4AD81B3CC862A675AD5B41E80A747E3252294D52F1
99F9C7094BF0EAD8152BF748694733FEA24683F2370B1ABFB841B44E5800A7AA
E8E4E89D8F959B78B813586F20758C62ACB88446E6C561055CF9F94A66186C17
7501453CD3FE3582073DD86F04412D25F9DF1B37F90088B8DB12641ACE24FE63
A6960D7DEA683620836DA8BB5CE31BAA722DDB36BA5642CE4115C9B01ED1D590
3D85F35CBF7640218CBB724E745DA73825430C54D49D520611165AAF3711B005
AD3DFBE56FD103E187BE66FA501D5DEBA893368EA3FDD3B3A4201D3C9AC25A53
2BAAEBC8A228B58284599EEBB4250B3B4DECD5BDA34001C878C8267C6EF1A61D
2B91CCFF1BED30B9A5D6567BB004E3B5E0039FE7704B8D86E980962317F10CCD
457E4C23A2991E9515A7C59B4739743D0DF6AD43D9EB29AB731DEEDBE7884330
0158908F77C0AC75956162378B689AF6978D929610EB3B5B3F86179CB516D729
2C49C53455B980EEAB9CABFA04EB972BCF356EDF82678DD4D0D9287FA97D0495
E28CB8E2FE2A4CC0B9DE515F74558149F1127C0CE693575EE9CF7F4931E7F673
9A194BB5CEC417F721A1CA704913C49F8BC8243EB937E8A9A0908B0E5D725D21
F531072180C1D863F24617C2FD021F271CD6447ACCA150D05B25BA9C9DDC2F59
7C8D4B0859454B825144FC8798D2B6E2B78A17B802EF4CAD1ADB6F7B4EC2FE3E
1D71BF5CB13EF53E8B5993B89B96146F87374C622CEA332147C7E17F4E7D1A3D
592C795528DD7D47F285635AB07303DD83B31B0126B86ED28DF8CAB35E069301
654412E6D469B1819D69ADAFB7ADA60888B3CB72F27AA182909671965AC8849B
3B885B7DAA70ADDB28695EA6AC56160496E102C4FA87EE82799CF60EF341679D
1F33CAFF807F256B31120CF711DE24CAB53C62497F6B3C6264FD726D9C0B7BB9
FD97C0233F418BA4179626FBEB23AF2E20702F9888B531CABC31F73E1809D297
27CF7262724BC9A9A578B3BC9DB5CB1B44B1BD592D429D239E7D0BBAD6E383CF
9E8D0ECE8EC47CB9D61C5F5EB6F381C400FAEA98F62F02633E0F85A780A61DF2
55262C88CA73B436527795BAA59086831567FDD5B3BA6934D43F796A0A76858D
65B37ACD6745664AA06C3F9047FC69BB2EC88D6323AA7C2D6585F57CE1A9B138
6693DAAC745D2F529CD5EC1517FAEA5DD8FE805F33EF3FC77FBD6A990E7E8C8D
94E99EDE98DEF39C2CD2A6F2692D84F46DF7E768538B1DF061BB3B5290DBC5E0
83A1E0241CA8CF5B0953645949706C496AA58E47B44A9CF5140968E527FA9F7C
891290A2643009F7C21A10C45E2BD3C34398085F9CB14B412D5D905F953E390D
D7354E2A5A6A5296F64E72F8219F6D0A06EE6C0F733B035CCAC9A2CAA28C87A6
D8AE0E1C9828C293837334C0BD8008943710FC649DBA7B58334F98D78901B2EE
7D582D640F8E39492561559CC16C5F0E3DA61AE13BE61828CC3175A31BC100D8
0CACB8DC37E7C7C0CA4DB5C3993FE8C1C4A90327065B49B32DA3ACE7B900150A
7374920D6F63770EEE3797CF63A34DC1FB491ACDD3A0CE09DF3D2AA01AFC9DDF
C00C98C87EEE4F17AAEF29B1E846118AC9F0B2E42C04E3EA9BBFDFCE60D218A8
996ECDDC6138478B29F1588ECD6439832760954D2CE0CE474B3A5826DE04B5E8
0FBDF215FE68057BE93BEA6B23FA0D592C03BA3BA078F55FC5DA4013BE687DC0
C5D496402627FB963A90B3C438EFB1B01B0FFD3C1E5807203C5389F960C2262A
263D11F3C1C379CDB199E4E4DA535522CD9B9EBDE34A75C83AF124955154CA4A
8185E98E9577DE92D32FE7CCE94227FF4DC0CD62422812B050DAE9D1E1121A5E
880CFD73B51A92E058109B6475EFF13E12A8EDA3E0ACC243B1073280AAC502D6
194BCBA71DF76FD4BE7B248ED96F219D4D5B7DB5AA1F97C7101BABC80FC67263
96B20DFA40ED6AC6C1326D0583C1C9B860B740F2B4D53A8656B4EABE3095AF2A
1F4266A829619C268D692AC008C42D510A67435DB54F4B44FED1A401EDAFBE8A
3F9F871320D840B1BFDD84BE9DAB65D3FAF1703E3AA0E1EA27C9AE258A3823E7
34ACA88750797D6AEA1A9D7AE2ACB5ACD2E5B15B0525D2DA40EB87BB2F45F646
5F5186BF3C603D347C7DE7F9C6FF3859DB1995E9233092F528D6A704AA7EB260
B129531E336E81142096A7719209AD3226D3C07F56A4A43758906C727A0D9295
A2108EEA1D138B90B1C8957CF8003564809DBBA5AED8A3FCC9992B8945C1FA2A
FDAB64AAA3BC73DDD0A2713820D615BA8AE46DCDCD93BF182F0D75285EFC0486
2E30C66C2A1F2B54050E3F5C7E6F5C409DD4DC562BCF005A05EA389DAA2721AC
6E6BFF0015EA347BE55F416B79718F7C53E34C5057880AB32CF15942D362C8A3
B8DC37E7C7C0CA4DB5C3993FE8C1C4A90327065A93A3ABA3935446DCC68233C7
BDB6D32D871618F20584410B23474BE8A196AC89067C7D659080A08A54C3602E
E3E6889DA5E1D5B944B8FFAAE19B188C5CD06352E7E61F46EEC4A0102A610860
64FB56D54FC54129B7DF0DBC4CFF9A147695843FD9CF8D6BEB3B9A8FDB3333B6
94B720B99FEEFEE14143654B5371340E1067A2A61839FCCC0EEBF12127278B4B
3CD2255154821C89B2E992A8BC38847BDD3CD527317F3063086D8B6746817FD3
1B267DD37B7627BFCAD617463B1D8D5CB6770DBDDFD8C0EC2F43447BD5D56502
91D816D3012B80AE7A74DBA51227EA05937CF5C59075B9BDCEFC4B659E93BACF
45D1A4984576688F65DB72AEC255D01E5F51974F8B80E5501D8F336705C86233
C87A1B4699D58D1C7E4B5CC437796813362677A929B61D4A23A2E4D3B9E9A2AA
8E239901D2F91ED4F520D3ABDBC8CD3907AD5C96F7A59C33C614D69D0A6E0596
0ECE7390AFEB6F7F9E6309A71C82A089CD2DF10B2244E2F7E57AEEB6AC3FCC14
829F7C67999234D302FEC4DB1B56F5F504AB332FC17EABD6E425CA1954451458
7A726F159B035A561C376465F9331E5C7BDD1DA502EE2B70F63CB15A4FAD891D
B8A88E4538A6A0C4874E486F163EE2C67A22346CF155930698C2E76B71C22AD6
5A79C2846D21C498D274ADC1D97A103530EFB969DD8211536C8C65A82A1D0032
42430EB6FF1DBE8C3D96F2BAFCE335D88DEC200EDB3A2C7866C977678C571CCC
9FFFBCC262776F2A7D77A990393CA5CBCA996BE2E5186292AE66EA3E3038B714
77715A00DD0FF50F7A508EF9B24E2647B5927908E7851BBF2779EA237021FE65
3D031928B5ED54D53480E431C10BB4D94A38E4E2071E750A972AB44730C0F76B
F39282D0236E0983786DEAF6699160F8838DA5A4DC3F8F945E8803662299C3FE
983D7D85435A6220AAD9766F92298023B5A14A5EE325D1C4CA5023439ECA0195
EAC3F1391D72DB08B0C95A9C0ABF06921828C1D7E3D659958E895784B9D74424
7FC4DD5575318E1A50D360309A041B59584455FCA7617FDB5CF76EA14BA13438
FC813C4733714B2CE55C91BE549796D04DF527CF1C3BB576317F0DBBB9DBFE99
E607344B04983A23CE55EB5F5120F70CCC8012BE1955841A042FFB4CE71C48CD
88774C41519FBE06B805A8A481584D6424DC6B35CAB2C76B332977C47DC59EBD
A38E539D9345749587AF87F36E122F5242B8D9CFA0C0AED4627E61E68D79B52B
6C9A5A23667FFC0309EB899701328597585668A9A844B76E6C171324BF76CEF8
ACE58B0B3E11AC950BFBBE381F54466BA9BA284628BD2C398B43E245BA14B9F9
940CD1DC9C0C5E4836CE82695C814C3A9960D61398A29EA23D3F9203844489A0
9B8F2D9F67EE7704763D7165B9EDCAAEF1F93926CA45B038D48B89C2FD4CD029
43719D9F211B74FBD96D19EF77BB63434F883A341895C5287D9045A049EAA0F5
E363D448A9C9AD9AD492C092E51229927D2AE06D715CAEED863791838C6B2C53
86363EF3939950466B0623306B5B83E7D0653F50874E953E3C7C0A7CC921338D
AF4AAA271DDEC0F7D5FD588D8B731A34D8BED6C01F9C651F3DECD2C79EC9E949
220F93BA22E67D77A3868428913128B054F55A192D587A28EE9BAC9377908769
2A471C8BCC6015CAB21B86043F1F51250C01A4F7BB3B4A6CC4D223323755CB42
BDC6956BD0296E205D1BCF83D5DB5CC7C08ACEB4FB817770F39EDFB59CBC7D15
59ABF4A516E146C4BB796DE6881488179757599BF5D0442B374AC1DBB252A709
783A3C875081A7BFA3C18EC4503D3FB02E7AF67B67BCFFC905996906E0DE7455
5858AF791B454DD3CF6CD75CC0201634666137365AD14D8072409FDE0D5394F4
7E610DE3C0D53763E9D154BAF76821F2C6A2C86AD1FAC17F565192F4F2E2FBC1
BA76C607F28E5C144B0DE864223AA92A3067CA010F5DF813BC5ED1863A6C1411
8C9E7D934C3CD92A86693187D90ADE8CA5F3ECF11371F98E18749B97EE9721D4
2F67EAB53FEBD00D5F3037731F72B5FBA4FAE9ED43884B678196F38F735C17DF
38AD3EF96836EE6999C2D3A4B2EDFEF4D54BB4CE130EC46388C93586FA4E92C6
96D129F1845F0E656ACB238E4ED93D0CFEC0CE61F7DF1FA776F1655D27B1030D
59CBF31C3258B83CCF5FABF6BD5106AAD0F544EC743F624F427DE29459DA5D50
46BE2DFCD3E87366B29754BAEC7E8F78051E0A23E7670968C4D0B96407227AC0
DAA50D5EA0328CC5E440
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/UniqueID 5087385 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /psi put
dup 39 /phi1 put
dup 59 /comma put
dup 66 /B put
dup 67 /C put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 99 /c put
dup 112 /p put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D9154A639FAC92F771
75C01085B97FFB2E1A79FBA5107117665961BE9FAD2B57A35AA33B5B84599AE5
741EFCAA965AA33B945D806AAFBEDABC7C47532B4B23114CBC66BFB363978AF4
4DE4705A95F070E333E3F34AAC77F45A42AC7DB239E4F81798AF12F8C8C959E1
7D6A4330361FC33A4F41867536E8D75FC534E96885D4D19D48B6D23354989BF5
EEC0F140B4AB0FCEC55B81EE8FF06AFABEEC3FA8D7FA06C60AA8DDB4A0A25098
40CE593A89309EF414BC9E49532E56E466142B175579C1AC96742A888B9340A0
85F0A6F170668A13062E1C6E2744D5F495E450DADF5A7BCC785EC39031B27343
F4E5CE211E88BECE75D7B3D4DEF55631D27869214ECA7D4BF54454EE41BBB58E
7CB52421F5C53B3B5B2EED75C155AE7A1A8FE56CFAFD561298C55799F8BEC280
6768111EC8ED1736F0AFE0DA4FC5F9B76F4A262313A0AD92DF814DB3E552B294
34F5C467F194BC547B29D1CF571D29E402CB588E5A8A6985780EEFDC903E9B02
6280249D53679E3EB6ACBA971C437C7815616AB9536B6A2AB4F25A49E3A0FE49
E491476866E78BB41047A34DAFD6FDA01212D7DE98F795478E12A9A76E6C335F
07F699B2516E01FA931D538A6BD727B71A044142A7F2DCE9272CF4F59270C854
67319CE852316AE1A45F96658ACA1238231E0978A960DA793EF6EB9B0F911034
AE1F6FAF52920FE9788332EF3CFB006FB5850B905CD8B42FEA5B4F93F6F909E3
75F44E4628A25AD674FEC58ED479D34D935DF62ECF9115C36396A30421A521E6
333F4F026E412D39F89202B6C3997C020BB086EA7CD58CA7F07DD9937E1C139E
103D7EB4578181E95E4C91084C2EE44265BF8B28CC148252E9B1C9074380B9FC
67B0FEAA517E444E3D41F72627B084BF9F8044C786FBE437A89951F74E873466
CC692CA1BABEC8AF4D56FFD72935B3DD0D502D2B4BC6B2B8ED74D335AC18DC46
28A5B54DEBE95CA4CF406626D7237419E4130743F1CD227FB7D38850106FD7C8
102432CAE2358CBEEF6101942DB4897437DD8C515F7DA69304ABAB29738BD4F6
90C51188F5C4F43E3AA8001F394AA7E10C84A94D8560E1861236FE01CE44A3DF
9EB656FED8F11024867DE1D9BE86231625E2D855EB2ACB0153A650A1F1005607
07E04F2E47BDF39DDE987F506F35467B2F6B200B0600EBEF94FB7B43EB6F3B4D
302C40D266FA94BABD1FD9D1474B03F983829A839D8DA5FE6781CD22A711EAF1
263285DCC074F17BD42C1B217C16B10E719B0BD465C4356AAEB6DA9F80B675F0
3B8AEC2761F5F7AC0426F0E86BD08F261046DC00FA5F5CA276163894F5580A30
9B13D61E265C40DF50AD1E89515F7314B6C2993DFB401B4028F1681153EBF199
CDDFA1761BD627D8D737F4805F50601845F653DF3073599879AFB41E70CBD438
89EC2B61D5FDA55F0A6B5F6090F86D257BCF6D2E2BA1878031C51911847429C0
D41669FE82C2796C75E0D944253943EFA52E74F47B4A784C031270F4E1949EFF
C2875D1B34BCD548EF7F39C7804152BFED3A0C6C41D8F1A9ABF40FA4FB79288F
70E6A0A8BE44F16554E95EE58BC148E307BE3365475E559CF1B71BEF88C22526
7E3CDE9BB1F3402F7650453CC39FBF9E202CDBC1C2E07D43ECB7474350DA23F4
B15590194A0E4070B3C9718EE548E0B5CA6B858939B6CFBC835755258959D936
2441A94463EF81300D06510222ABEF95A90CDE10C7E063BF381CDEE7749A0983
9082F3F3AA094F8961052CD22A02765A31131FBF3CC3F3812E0FF9DDE3A6AFA8
79D2B6F9F2D07DC9E861964D1B05EC8BD9A17E5D8565217996067126BC9D495B
D4F99D3DF5D4886431F55728FFAEADC67BF297CF070C577BD8E1DDDC5BB1D100
637FB76F49B9448600EE00961A3F23F175BD9E10DF33B3E61B67D20609D0F9E2
42EFB43E453232F4CC6C7CB4256457BEDA0B4D13137740ABFBF408BBF4466D0B
CC45A11A92D7D0078447DD655AA95D1ECF30CE21CC48FAE942968567F0C28176
74C9C82536A14B9BDD2BCD8EBE52CC2464A032404FAF43FABF8ADF24D7CE7D8A
191B7C4A84C786C826FB2162D682BAB1249886DC94970F30C3FAADBD889EE84F
59AB4F26189AF611C49F7186DA1863F66148193B5C6D471E8FC08E9FBE7654F0
8D93E09004761674E686A6A761051F773EB6F7F76160AE9105C783E4977803F4
09601DA2490052728EB7D68AAA443953BCE1B70A483B105517568221AEBCE1B3
85272A78D5CD551F5C8D6FDB0A111DF977CC6E9FB3294E35614FE3F3ACDC6ABD
93EA66D1885FADBDCAF2C4452F81EBC3D60299510FC8EA97360DF0BE276E1B87
706CE6712DFDE55605B61185339FF88F833CFA96EFBFB51EED6BC8588185DACF
6256BF930B0A20D2A88F1A3D048101E0FE9FB70B83B4CD8DB592B280657A820B
B243DC0A95E7088186F2F2472C6DA6D85C6DFD8F1DF35D882476D379D2EF5102
677719A89F817DEC1DA0CD8AD099D6F39D16376379B896993078B20DA18008BB
43FC8C67CFE0AA48C54F4F4193C20DDB98DBC7FEA6FC0CF3A7E43EF5F4F174CE
9D143FA3B2E09271FBFC9CD5C7BEAE4D178DFA43685A5CE9EA66B505F68BB325
317764FAAFD6CF1EE5E3E104CF0442161854B192B9125048971D4A2591EDA32F
73B6795025A9B4BA3E2D2D0A8EC41275D9A0763AF4B4C6E6FE25773953655261
453AF98CF1FE3F25B78C68C40B4C39609B312CF8091F287C19EABE738EF452F5
6193C9D6D337636AE306399BB426B74CB51C6472EB7D0739DCE2B3A64762305F
DF4D98802B0BF44B73736304DB16D8F3A38FB9737631FE96F6E8B3C68F331EC6
F166CEDFC878F73F646B31BF5C20715050E3AE5C1B86AEE0C4649143CEE7806D
A3BCD33674A3ABFFBF3EF7DABC8619D26EB0299F80879839321CF1EF2C1DAADB
93455019A1E25CCE2C2167FA26C0E715915AEA4B66C4B5A9BA1E05CDA6C6BC19
7BE6ABF0A7C5D33A78D4A865524657B444DF3BDB746E0F03468794C02004587C
99F4E5BC5C12E26590F245E37C04C2AB2EBEB94DF182A8AB44F1904555CD31EB
740383F9B0EB8C76A93803025636186F420A5E09E19352DAD47DFE245BD026AF
9CD9C35372E0050F1F6CBA8547F10DAB45E5F6CEABAD8E57E31C65788A5DA717
9DDE49A06EE324172D2D80892548705394107CD2C3395E1D53DB53D6564A8A71
DA16F2253935DD0D15A50C0B1DC4C6F7F5B34440D8AF5CD077841BC6CCA297BE
55C6267DC39DEF79788B4F8A15BDE1ACEA6381340133667B44D412125F99D947
62BC80931DB71B50BED01EE2DDDE6AF624C1E727B9444915A19B2052413BADA0
70F4411BCBB63F2F91CED3753C7F29A00E3B2B8BE16C368195DCE61EAAD91497
ACBA20069A5C724E5C59B414D572D29C3482A02F68BD2EC4C3FAB79BB81CC8FF
8B9D8E891A63BA941EBD360E433B05A8948FB2B39FAF8665E339121E7D7A6D79
631D2C9B74E0F2BDD8D25361789CDBCDBCA2C2448BF9398D1A084349C46A1D91
F69606A5B6815CDD1D53B5484E967664379A3412F76EA0D494DD38E3DEBA3207
DD7F074B1CA547B0B2A70ACC3E695DBAA2A0ED959991E58CBD667FAA2FAA23FF
526CF598ACA9BF65F4423AEA5614CDE283A6C2407C4C3293109D9E6E02E0516F
41207D074C056C4847BEF642B60BCD43430FFB25DFB0134B78E2112B29C7F264
27BA35FC15B2982F1B3A37DF108FA241DF260ECA242CD0F39834FB54CE4A91C2
3D9D78AC154095EF20E5C21CCE3B67186F5D14653E7D226FE90741824C215840
4A40521CD1DEE256BC1162BA23327CA4C80ED3A4451C473AEDADD94F42C5433F
D58A3AEE4D293753D8B88D1723985F57FD6E7EB567BC0CD7DFD799
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/UniqueID 5000793 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 45 /hyphen put
dup 46 /period put
dup 49 /one put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 78 /N put
dup 80 /P put
dup 84 /T put
dup 87 /W put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD604548D553D4A6EDB247853225E24E7E9
89D71F6BC94DB986467E755CCC99069B313F5745B02B4BB608A39F0A0A732B87
7EA2DED68219754BF1FBCA350327572D769C962EF9242132D93A5C8E9725D8D3
AAAEC15ED0F43F9A1290E91C463895BD12E8A831DAD661EF23CB9AD2C26CFB26
71B72D15270CD8CB1D59CA2D9DE884C96BB923B1EC8208BD7DCEAB0FC2293629
2AA1F72C6B470701C381E335C2364CFCEBACDD20CA36182CA7E70AFF5B14B02B
75CBD0738E35DAD8E60CB3DA4DDED557FF9ED386DA52D10615E700751C842FBC
85D89C0E713F556814E051C6CEFE7E83C2F379B88A801DDA565BE73013DD56D9
44D97798564787AE6D5A6A9FB777EEB850C7481B4A353EB9279731512C9B95D3
2ACA3A0D44585E55AFD968135F6492A9381FA2D126CF50373AB7D47B509AE6F5
C4B100BE8334ABE2268DAFB7983BF339540A8D8280F3576CDCD4F21408AA7D95
D50A7C1599E62D4FCAB001D5F9DA84FA530B88F2FE36B36F9968B5CF9FDBFA11
DCA0E08D087C4C5F4D744BFBA60FC22E964CE10AF512C228F4CFC3DB21E38CFE
AC11748F9B23F33426BC4AE3F026AA8178364704446D3A12157DE158671515E8
FA0324852EFF0888FD90913D77B6417FEE8C039C12D8CCF516AA5E9AE60CDF64
8F9677A2701944FEE0E51FD5BEB501509F73CE26568F78981B480F688646A5C8
C563B8FAACF6D61C1D0A16CA68A4AF96E6F89370958884EE230DCBAB3E90B348
F1657F327D698A8A222DE58623B2B82E6F39A572823382D6DBF390F03121A932
BFA4FA7A2247EE3C628F9A334F62DF98CEC11E91273A1462E6E80A7B58F0B3A7
1010CE8BC3CBC4698763770EDBD721E66C5852C838BC3BDB4D669E857C728060
5EDB2F5960CAD59B4B3B349146BE16B93600F1254FBAE5E548E490AD28B1CC9A
B2133D79D6F030D91F1C967EB2D468C50DF812D8CF9F07F4648192A7EF6EFE72
6C526DE1A99350025F131D697CC0ACDE8CCD15659B544BBB3612697568EA0D83
DDD7E1D83FAE2FDECFF5AFC95518DF8CEE4B9E59CE2420515A0042EF7592DEE5
2E10D424859429DCB4ECEC7DD282636A3D07044AF41C0A3FC132DB99C17A6E74
7D024BC3297C403B5E2704963ADF87B75E8CDE74E37C9AB7F35D50296B0B418C
5D08CF057ECDBAD28147DAC67EB875748BAE25E19474B782F24BF7ED544AE148
467180DC2293FA812D804F479EEF9C03F89E026963830B08E9BED0FDF83EDA2A
CD3D3B279ED66EB955E260AF1DCB0E8959857A5B2FDF4AD90CAAF7A0B9449559
4710F7BB631D9C72C9D1037A698BEC695D0E254EE44384CDBF724CDF871CE1B9
5B1A738E62B64B42242C18F5BCEF3BBC0BBCDFF50A96C971445D731DF9B83A7A
1136A9CE8747794446CB7232023DFC1D7D4C4FAF55E151C39FEF8B47E45C5AA5
F99198A39BE62AF7CFBAB277B8A66C8413AF5F059D8D3F20870038B6EA3C5E41
A3E6E6EAE70E64E165C15797687C7632A189CF44A025208FBB7013739A349082
F6530C501595FEE183738BEF36982B7B69468B12590B6EEA0E1A19CD13962231
7F5DFD2EFBDF0C204AD90CAAF7A0B94495594710F7BB631D9C72C82FC752771E
B050A697558AC6062ACD9C0C1E624A4E47978D228C684452513CBFC52EA63C63
19DEB18F99421D5845A65F73AED95051BDBD5B304D90B664CE6B192C1FB3F7B5
290C219E9172B0107883EE596FEF286C526C0195133CAE87C919D97B0DD0851E
10A21034A28CC98941257FBC1D848962774285A0E73867601A1637CF348B0D6B
F5D5EF773DE3E6D9D24F9CDD9F80028D37C9CB4067A28D41E87E9776AB3C909A
298FB39CD6BB24A6903F8AD3E1BBEF226F224F076E191A04CAADA542CD279983
3899786FD2A71E9F3ECDEEE52660F105F87986D495940EC148C3A704A3ED4DED
4B0752B9140400A582B58EACDAFA8B8F8202A3DF5AB0E627DFFC6E90B9C4C8AD
FABF8D9CAFFA4BC15B304CFF45D4F3A025E8E7BB3683C9303A88BF8AAE99BABA
C7DD277FC23AA3DE48A149AD459D4943657ADD0F9DD8A5F6F1945540728B99E9
DEDBB101EA468DACE64A3DC88377E655BCD08322639BD02BF782F71796C475F4
F8E0D3B9283C4569937E166BD089B307BF0331BB6CA7855896AB43E7B58AEDEE
8CE96D3D45EC6E69EB9C16ABAEFBBBC1AFD05BD040FEDBAFBA196652FBBD25DC
9F3242DE8A3045682DCE854E35F1CF40F594EBF1B7B369B7F11E2A4FD48B1DD7
3C822660AEA53341212E7F76255227DB7CCB9A8FF39084FE111795D12E92661D
1BCBF24569CF696E75EF78B0673775FE3ACD7B7B603CFF4F4EA2A6932189D8AF
3FE8E4A61F72B5E314326C4CC71E30E165763E303EBB6A4A6ADE0F0F682711B6
6397CD66975ED6FB9DEE45057836EFB61EF8CBC77A664D9799D7410A2BE863B2
7DF4F07A991A6EFE8EE62F1EA78757650E2AC26FD439BDC1E0BD4E6191E9765C
4CB18671307933945F052757D17B2E7069F16CA75D4D5D0A73D84EE2F489AE97
2868ED500D35368F2FE57B4701718F0AE43962F9F7F52A49919ACD596A9D502B
AFB8172B23300B4B4524028D630C6AA34D40E605AC83EB2C6D0803275EEB5494
ED92C08F17FB8B012FC841576A00FA77B8AFA95261976094875FB1003C0999B5
B995DF8BF633D601D42116756BA5BFFDAA2BEB94D07F388B76902DA2E5894BB6
597DE66412AE0A6D6F6E313EC20501B46DE40E92DCCAF48124140F490F8B104C
7D5E8992F55ECDB46CFD3C12005EA07CD65AA53D6253DA3D1AD543728EF5ED23
07DDB8168ACB25B85CE2C292E166E3A9B91779837A314C04B7546244474F513F
8F91E616AB868D0E9E78E5B2E05B20D542B7E6459FA2CE8C1C8A1691859DD941
74CFCD460AA15777BF3EF1BC1265C5E17FDABF924BF7F6B2F92CD7DAA18888C8
F4691EB37F502F8DBA3FA0FC5B3985EC6ADF793F0B231C7AF36895D9473610D3
3CF753900FF31BCE469F621C590DC9F916836DBF2B14C24137B48582501348F0
106E98B256E229329226FC0CE176FFD70142E86EC2AD66D09C4418F7ADADFEEA
15555E11B724FD0BC240C4212A44D651420673364D2F5F08BD143A7C06BD7EBE
2126BEC1FF258D76FA5E45C08D537491A30C3BB8685EC1167969BCDDEB72273F
7959A001D4FE0445D9FBDCA8E554B61CC07CBE503BBE17BC64202084603747B3
DF1561E779955D2C14EDE44FA3DA82088F2191103AD4C2D47E952C56DBC24D42
5AB957A6864A7656C8B578CD64BB9C55B200F3238DAC5271767901E67943792F
838BBC9350F1248A3E49B091AB69FADCAB6062DB4AE379D7E44508961BC7F6FD
38917A792D843FC1BD17D244B0814AF9075B3A42D3FAC4016B7763E3911C7CF9
0AD22D6DD5E8A0D40D0CC4B9985F1D7F03B11F60F2CC880FBCDAE2DFCF164BB9
44C5F227B5BB965EC07EEB19D151D290E50A0B9EF24A5ED767F4D533B6160BB1
AB10D6F9F78F44E628EBE4CE430A38EBF42CED39597B76E5E1242F4438BDDF9E
4850788B0B46E26BC32C7D61E01C7084E3A0161D14E6B6923D472CB36A984E20
4506038E76EC13C6264E69B55D1971CD1642FC203482A37A7B2C720348F8F416
4946564BA48E1BEF32087A030D933A9F3D118A0B30CC1FEFA6199B33F3C11735
35E17C8887D71CE8A86D23D781375EB5AA3E159AB667FEFADAB0732B8DE3E33B
AFBEF614984B95740E8021CE8E30BB035911BCDF468925DA7AF4E11FE7FA08D5
A2C8DE96D51C23A66CD21DCB8391F7CBC8DC297B163EB95BFD4A92D66AD85ABA
38ABAF75632E935A267E071601D78E215DEBFE8C31A4FD7733F6796FA76B628D
2E22AD0E428F52BFFF2E1586F9C846C35CD6916BA8673A3D1D4B597BAA3353BF
4CB2978E0D0F8905BF7B5C1C47685B50533897435F0150104354729C60D9E318
768AEE025F07453DDCD304A998527576D941AD6E5527390D6A6C0D757CFEC267
AD92F49357FC3B7824A181579C4638B0BA3A3C794A08780375970CD739AA8313
5A85E51D2D30092CC3FC8F45349D513D6FFB8D2B470B2FA1CD971389B2EAC14F
294760B128C4A6CCD2077084CC7200D9188C45E105FB863B8D23D47A0DEBCCBA
68F107780B3601D7CFEBB93308DB25351E12112E99DFF681BA3D16A65EDDABAC
CD48BC4377CC1BC095AD812296D697C46B62F77BF70B1DFCFF2D626658150821
54E4D4A6CF0E4FED9D65BC0EA073F43ABA5F31776BDF3FBFF30B21794CE422C1
6855DCFE57FB4A29B659B151FF9B0315DEA01BA7890B3AFEBA6FBB23E22AC07F
AD0BF01511D30493AF7ED486F340D631164A87D354180A96D7C20C65C604140B
13DE8E0198A70F4C5FEEC9B2B00023DF4176897AB2833B53BA20157A615FB86F
BB55F7FA9B5C83E541220A0347D8BAC69A9BD6C10F9F6A8B4A1398D798EBBB0E
8BE324B070E47F7445665EC0CA69D450A5A89885472587284CAEE14A9BF33A1F
8989BB294C0801009AA2A8F38747E1D2F1C2D1DDCE0584AFA043D60BF8339BD3
4078E661D590FEABD24A74DDB23F09B62A770FA45DE1A35C316A0FFA1175369C
C1865FC59E8E1D150CF2A3AD7C4B1C255025B964A2BAB44B67127517A37827E4
04B85F41C644C133779F10E4DA7DBF479FC08F8244F88ADE92463D86387302D3
5D44EAD80BFB549566AFEE3B2BBC275036A0C89932A724596842EB1F9ED70917
B2B99F50C3980309DFBFB21AD439BD0E240EAA17975F388EC781A186C70300D0
38557B19EDE35735875768ADE1806FBA55CB1A4BDF8DF10D17D8024C53115CBC
8E6D609206D41D33DEA0E670A86C665F16A5F5BC566A0DBE3952077EBFED9F9E
38C33DB7214BE9F45A70DCFEE2748F86B26C4F0AFD6EE95651B185B3685DD26A
EE30399F54CA5D037A4312BE75872DFF93229E270AD661DCC7CF1F1097172D8A
2926CD551C99994069625918106F00FC36BF8CEC89A5E1B9BD3C9A69DB258D4E
F96BBC590659E8179717EDF846AE404BBD2CA8484DC121D5A3A131E4BF59F429
8BA5B33BF61D7A481C2782A742BCB6B189408307C4DDC16689B6C972C2F442BA
43312B9281D6DB7EFE4C97400A57DE9127B806D13DB91FEB2BF22C2F2BE049AA
70FFD42C32AFD7012EF3D94C22654C220ABC8844B52F72B97A135655CBB97A14
0C81DB51C9463DCB8211BBC76D369D8673BD0F276FB645F0924CC42FAF3DD17A
EE17773A004D16DC7429F5502B7D5FB976530BD754B4FD6618390AB8AD9D973B
E3A5479191DC5981384E7924A1564E9A4938B3440AE120BCC98A41CBAFBDDE45
E20549F81B3D21EA3B954FF16E4C105B08EFC76634B3B33FF51F17E4DA7049F1
14388A31B233427AC1F294E639EA045F51E61AA764398DBACC3F9F1A2A8109F3
9F9CC8CC8AB22B6AFEFEBE2ED5D7F66A7C8865BB550718A2D4B25D2BBF259DCB
E8BC8CA92301680762AEA7F2B8DBED8CB08E56A7BC5E41033AC55957103A6DE6
78E0B116D838535AC0021DDEDDDE110C6787334AE5371B82386A21F637345357
1B19EF6593DAAD15F0BDB3F8F17B664789180B15EF218AA816AB2BF13588D1C8
FA264F6AB6358ED086488C6C13E611F569201F9ED5FA6CDAE222CB5B35850701
A06CFCEE31BFF0C31381738C77CE10F05A79CBD9E25B4A1D83DA457DB4318B1D
88887425FFB7202183B7928015E8E56243E31E69A878B51582C459DA4D6698AA
78800308F2E21A636DC9459088DF212351C6F403107BD42F7F86F87CFBF455BA
B06D883EB010524D4744C59AEC9ECF180186D7394DB565698ADE9281E2679541
DAEAE352F6E200D000C55E16C7E9C9D77BA92EF3A758A25CD886515D54A47AA7
928AEA288694071E6B3355E55F24AF6417F0B988E911A4F1F0A8D139E08224BC
8A13866B8B363EAE928457524E5CC6340D8A7671DE8349B03896F32CE12BC834
CA4305F72CE5BDF421FBE13593A72044AFA25D7A03661366322C2A48AEADC588
AB8BE3644BA7B3C7BFA5EBFEAE01626CCBC4C9858E8BAB2BD99692B180007A95
156C482A4906D394C598D8CCE9BAF4F175DEB8D74E1DEC7B5D1E94D3D3C4BDDF
DC727D7EAC6A54969A2B985B4BEA4D1DA7FA6F343A9C76250AF42C96F1C415CC
7C117DDE602290A4E35BF500CB9B6A030F5896D97E5D4B654D56A85516963565
E6CD5B02D4CD360056C19A1856B9B279E671018744A0C7AC57A76896166CBD99
7A7D4C2A6DF605CB322AE10A30F62312982EF8FB11226C909A1C7307EF5FA448
54FFBA58DC0DD55A0C870E491D823CC7B4B2E75FD7D372782840F7001EE93DE7
0781AABD6EEAE4CE194035CD22E07EFCD24AB4C5A4DFA5A3B8196A80EA677573
CF74325BAAB4F9DBB84B8B1C3375572EEA4FE0F6AFF7020EDDA4B9AA15849D74
B4024C468E76F2CCEBC8B76E57647946174D9226BDB588710B417CEACFADCD14
B8A354269074F5E4A78D727B9DFD6F2572E0818033989BAE8CB45CBB7CEC357E
EF870C2CF4F66BBE0028515664786AA4B1C8AAF2318139E52033C8CE262C132A
44D42885FD510BFE445471EF887BF72A81184A3948012C254FC79C411B412647
E433657E621C551071B2533234502CFAC9359CEB921EE01FD22122788299AEE0
EE143A1D058C9FB543FD54943FE006E123B4DA056BA7892B616068E7557B526A
3F91597B8CCDA48009DF4E4E735A9571535DE4A9BF9BBB94C571C4CBBDA2B4C1
E8D47BF074D8845AE0C689EA3F298BDDF9B184B7724D7497FBAB17B08813EDC7
23A86AACACD4E4227F79D7524A62E3B2F03C1EA7759D6FBA2E30CCFF9A74C74E
103F2CA3437B253A95FA8E33DFA602E691EF7B8FD330874D29D727FF279BAB66
DB437F6A95F06F1773BAEB6FC8CD88DF8948D1CF1CA6B36F8D74186213126462
3E0F63EFC629A30CDC5836577CF0D0867413A55D821EE5CE2A5F12BA4A4B210B
901F74B6E00867471D1ADB3100B13928CEFFA9B17D324A91159871AF2E27FBEE
64B73425FF7227FF368FA1EA2F1504A4DDCB231F0FA3C94FABC13C45195D96FB
5BAFD9B0813C05F51DDB61ED0C2F84D88EDF2D09A678D5258FC826380E88C683
ED8668F6054023E3BF1225058CE7397C68EB23D870E1FB81DB3192DB62235A57
A7663495ABD7E1D2575B8687B046450652594C4EC22F83A5092B4DA6B0F609DE
C01F479EC32A28795F86D3E756A571B6C8E328A65D04AF1D803350CB59290FAF
2DBF45069CC0FF32878A84B940E29A47A59DAC1A24B27512B4AED011EB024576
53F21C60147CAB0360B2E5D8C67DAC6226F2E8277D4B6094C59DEDF889221912
FB3C3DF213CE2CFF7F1A934083FF3551035C04C631D01A7D6279C4C2742418B0
AD2789760FC2494C6A01E14B57BFFC785FA877F1F3F807873B6971370BA8999F
C9AB328300D01C43B25C810CAFAE0C43AE8DE65069B29620BEBF01FDDFA1874D
A8A11396DF06C7FF414AC92A71ED146E03E367365006D96569C479C714AD1EC7
328B82854A3C60FE7664A8AE06023CF72C5A8B7422D27BA9AE9481C592AE47CA
D9D0F8059E9CAB10280F747D6CC69B870D5F916F49FFA0C7FC0E834806346CDF
9FEA0B6C052E64D2DFA0F9F0992E57E6C31F44FBCD9980BD48C6F15639CA507D
8EC4996AFEC15CAC9819E3171E0162D5C9788D9AC55600AE67A25B5A6FD43F02
1649E877EC12EF096A8722C2529357E3655C89DF33CF1583E07302F4F6D448AE
AB422CD71C6F67A8BBB9B3E1FFA2E06637147175D9F60E12F8B4401825950FF3
A363BC3C5E1CE3A9A65B5AFE52E36E0E4E9C2E4D03B99E7F262BD6DA6E8F7D88
0C6C2616D000CEC59AE35DA74393383215CFBF89042F7D728340AACE0FBD082F
C92B9745D8F1A47AF39CA097D6EAE4CCC99B573C59B3C01C16C2CF8FC3FD774F
222A5417D63A8E9CE02285EFC32DDF4121EF607EFC0BAC839B3C6D1E00004E8A
2AF89D74E9EB22B4FCE997BE3FADAB1E13696604C5608A88F06D511A51AB00F0
59D605F5BE1FCF87258EFFDE2130CBC2DD74F78DA223B8D72FCA325612F1CE0D
ECC67B6DCB2A974E04CDD3E1FF20362D27ABF01DA2FA6738701127B1DA0072AD
67B17C2541FF340C9C852CB879460BCFE62AF076D90FEDCB77C56D0BD8325609
F74FB558048D2800593E8900F483006CDD4D3562A7A884432796CDF499254C1C
D96437F9D36662F013E25FFA0A3AE01B0C6030355CF6AF56753A963A521F1E6A
DEC71449F98DDF79EBD3720ED1F563EEBE4B6AB41407CA010DF0516B1D9C3148
4FC0AFD9D2F33901F0EC1A75604176C424D4BDFBC1A5B81BF7D30D76DF11C2DA
3A765321BAFBCC1B9EB7871B29006B981F603058F2F69A0D9CE253B6F3880C38
FB234919F8A0ECFB793BF00224BD9CF26AAD52C5212F4116BAA05DB9ACEE7649
7F56A8610D0D06E03D76F812F2FF38CCF8B771CF80561A6DB2C607FAA760FE0C
04EFCD152CF92902D305AEE8F69E983CE65330DCAF8DECBE218C11CAD0C37CD5
3D1C0B1520A1684F527B54512CCBE3698B438E4954250AC3F42BA1C773CDA07F
7407097EBDE2D8842DB08AA1A21DC45B09442BD2791960C212B375BE06A59F35
AC83EA50D1CF18224D07AF1DDC351FD70245F392FE3459774C2B685CF76A4BAD
7F5FD3E2140EE482FEE6EFD133E2009725972AE5B6FE8411EEFC9BE88284960E
B757A5ACCC7E0CD56FCF690CD7CA9573ECE42F0DA824EAA5A74BCCE32A707B36
B4DCCEF2154980C669D7A51CA5FC937486C2CC425ADABBB7202E658829B029ED
982A8603DE4CA0B0890389228DC9BB30089144A614FD27E8E3C826251D03EC66
912730B0320D52ABC222CC204172DAB2A98FFC8393980A9F647177D58BB13FDD
92082F1447AD3B148153BDE6FB1C3B967DA4E371006AB662DDB225FF5860E6AE
6EAD28284260F8C99EFAB2EAF14C52726AF6DFAF9A7A4F991A96963897E71484
0D6791E787D07E92FC26B0528D6CFA2F3C14E9E6DD802A23A867493614EE2E9E
4A7D1DCF3C2053FBB31DF1098FEAE629DED7BCDDDB7FD75D4DCD3035B84979E8
C4D592305C2DF71D5C73350A39D04C31EE5F259344014DC3D6C1C4173785F230
5151D603B4D36E63FDA16A12205C4600D2E12E4D615889C5C5363A81D2059000
1A22B67F6261AF04A2152AD60618074D5C3951D8111E5DFDEFC87400CF23DBB7
064A81A9A39536812171C215E3D9A6AACD7E40A5AC90F427129F631D0231AF55
19B13DDE70699393556F1BB7FBB1E18C0E9CD2CD0C077EBA919909DFBCAE7B64
1014DB97AFD60B8230796E2809EB1E969F39190E0F9C3C80D93D8209C94E8875
AA66E66C531F86A3AEBFBD6BECB322CC97B5C326247B52F27E36C055981153AC
C43B8E86D30FE0BEFA27B080E8C64998FD459AF18543EBF82C321940A32153D7
5173094A32111A9697488EEABD416FBFE8B82C6C462338AB1440EECE359452D6
6AE6003C7E1EC385826DED89F8BDCBFE75A965A5D040E56CC790583FD1DF929F
FD88F15A1B02757666DD36C5F7B99B2684E00E00F55BE4A452C198D1167C192B
E12641F0E6F38DA7036699FD14B3094F596D2976453F91E28217A754147C9851
3E0BAF94253FC0AF1DD9EBF7F65716C173F4C9C3FB7FC604CFAFD0913706F48F
C8191E6452992535EE4FF136E2A6533F042C82003BAC97B6B1B4A9B50EF4DCBE
7E9C2CD7D8264FB90BD5ADCD18254CABA17686E4B89DED21478D58117A7F4876
6C2ABE5E6D96FB36967AD01DD9A37EF27774638E2AF115E6A9828BFF34CE9E8D
FCE01C26F9C853DB455B09AEEFEB401CE20FD76341626F3EA93CCAC0FCD9C385
74545CC296051E24AA72AE50B8629C4B6E2D9E6757BC3CA34B11C2C3EA170DDF
0C926EC7D6C7BE064D942D55DCC4551A05EB63DCA8F4771FF8CEEF827B45F6E3
95A23126D8A1B7E12ADBEBDDBEB25E579F2040AA2D52514AB79478B22635ED75
5DBF1CB7D05D7056EAD046104055A91FB8FD889BAC8562A6075CD4784CB799E8
195898C0AB5F8E7176E055D77D9BA3129518F2F2E1A2F63229CE22F778D3797A
5AC5D7869236AE86C22080F034EE4FB77251E510A576FB7CC96D246491F2E488
59E7F5BD7A1DE59BE1182CFCC5639C23E5E57401B83E302B71932690CC4B809A
BD21BE424B120BE18C92E58830E759BD66B182FAFEB717E6E03BEAC8AAFA1279
7C4F994DA3AB9F643B4A7F4E05BDB1172245E5226F064DE200B8C45064DC778F
CDFB7AC405B2B8E968FBEDA6677227EA05BB86AD5BEBABE98EBA79081D528AF5
650261EC832155E0BC322F8014194B0E46A6486344AD8C690CA0BFF901534C7F
0F2DD4C02803C3818D73697D93C491126FAFBEFF9167AFC7D0A2457ECEA81D67
B854A65BE8F9774BD8A211D79A39476A8A76225CE3B196D4DB0E89FD20548ED7
51FB43E38B1EFDF083A5E8E4122FCE28EF7EB9EC84F0777EDE86DDFAA9C867F0
048589C0FE9ED2799A905975CAB171854B820133AAF4BD03B5765E07BB4CB7FD
57C88B1786E27853CE20F22C163D6BDBEDF26509D7D89A241B190D91C1F6EFB1
7A4114596280F930A57C9A8A06B128E812CF0A27F44E3A3D290D99EBDCC316C6
082949A7F8269AFF9219D22F9E0663A63F1E087349FBEDEA483FD0FEB96BA74A
13D20EE2BD235184AF0B814EE82B9573049DBD636B4F3DEBB290A27E592A217B
06F26CE00FF1C5DF8607E705C38171C02917858C6FA3B19DCE37E0B1CC09CCF0
88C180DD4C698BF681AB7663052E12218A2112311EA8ADB8A7B7BFE300D3ECC0
E81B6B97FD901CE6F6A1E883E18A9A84286090831A9A522B48A36725022C2369
9A6CA8B86E6898E75EDEB2521031CA86D41B3CDC83401F9F1A765EFF1DA4A4B3
0051CCE13DE38A04649DF426F3AFE223440DA9356BB27ED6F839911983AD0DBB
1EC80B6930100E40C93AD28EA2B438D07DAA47885AAE407BA6EDFED48BBEF42E
D63D2FBA44DBD5B62C546E97CDE2E60CF22D7244B9DA27AF89BD9058CA464988
DC838A7A3183DB0016ED8825FCC5DC500CFA6A2700A2B6807EB90A705AAD8842
49FE40D4508789720DF459C4008BE9A4D426817FE0EDA6EFE936463528C2FA83
73003889F1B6920E14351BD1C031243C790805240D2BEF9B8F5C6FA9F175C057
4F2E14C58256DCEADACA2E59A970396546A42035053AE9F169954A30551B6192
1AD2E2CC166E21EEBB2AA25DC64E0EBA065CA35AF9424AF4285B4AD952160147
1D0387B0606F1B7550DF5EB257728AAF0FB8A8B09D50A6A92B8ACAFFA49603CA
2C9E724DC10A7B61076963FEFB57F30420DF393268A38014873E74BC8A91AB6E
2199B49DAE562C8416EF411BFA069D6802D19AFFB0A540C288D1283EA70AB267
88AF95CB357A9C9973CE69E8E522D6CF0D49603C072823E2A79FDC2BFF91F983
C7C25FE490491EAFFBCFA5836CFFF7949208AE420E0E661A6F7DBD74145B8D19
89906AF171223F71CDB31D55423E5F54E9CA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX10
%!PS-AdobeFont-1.0: CMBX10 003.002
%%Title: CMBX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX10 known{/CMBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000768 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX10 def
/FontBBox {-56 -250 1164 750 }readonly def
/UniqueID 5000768 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX10.) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 76 /L put
dup 80 /P put
dup 97 /a put
dup 101 /e put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43B233BABF23DF8DB
B6C2BD2F04672F9A3B7FE430263E962F16A948319C51B8ADE6E8A80D3D88023A
6DEA4D271676C2C8615C4A0EA7DC8F6601610F398673A4D4B905F49EA868FEF6
39BE073001A36DEA6C08ED51452F062B971740019692E221F4455EDE46AF24B8
407A98B791F6AD525C72C09776247E194043281D04FE1CD1D8AD8DCEEC3045B4
F95B3B41CD3300768D8A049815348BD7AC1004F5500817E3A267D694AE108BAF
285B288FC5F28A03E9D34FE5D9B2F9A9BB26ADE66B1CF8EB5BE606E83D213C33
DE083C20D636EF780E761944FCE3B8A950B1E6E7568F33B557C6D59E0CEAF185
53E609A4F58AC4D5269116F958C4D115C44B5A6DABAB79D3BB6E60BDFCECE108
74CFBE258779F32C80CD7D9A7CEBA50A0966BD9961F71560119668C4A0C30A5D
ED91ACB30940502B24F33906D6E0F16F81DA87EB6D7FC8B7853BE388C40D75C2
2CA8F94713AAA1561F5321CE97997CB4AF0E37F44E25B0F73CF4986422B1CD89
8F861CA623004ADB1C28268D7F8C484AA10C9519B6AEADC95AFAA3304D60E85D
718B2F67D2B734095E5A92C90785252C98067DC05137BE735220BBCB7C341D61
C4B98BFB1EAF883D38D7A93195A059EF82B42027F23B6CD633231D704B891A9B
03D11A646F13898F20321D7BC150C63FD6DC6BF9CAFD8DA759E95384B729A0B2
767B9F3E55C682F7A248BC1184F7D294CFFAE0B246DFCC8F215625DDD4F49F09
FA8D41CBF4A06152FEB152C61539ADF7E70A4D23AF8267D25CE3B12D39D62377
547E2528D18DC4134FA3BE0437EE0B3509223D71F06D44C6227D62BD01AC0A2A
3EDA975E894371C07CA1027B102549A7D552FFD25ED2DCC68E29E71BBAB43C62
57B0BFC6A953ABC2EF703F35D112F6B5460018CDCEAD17F149DBE5B52C2B9E10
9818EA6D97C8AC884F6841C9B600A7D868F59C1D80E98DE0741D06D69858EC84
1B33C6C9938B7E8A6FF6C12AD456EECBD3EBAF0D7331536B9F6422019FAFFFA4
822E79D6D89D6366DA636CB708894FEF904F366E295F1CB808E78E883913C4FB
1631248ED6A7CF1095C0C61C4F05E4B9DFC47533A5FD24540AD71A0E2907B98B
28085EB88ABFC3478C9644594C7DC4244ED5A7C1CA8D960B65497D56D174645A
B88F12C2CF0A807DA314017984CF3C4FB7F47392A651EB9CFA961B28E2989893
9FC4D97171BD5338673F5D1CE2C3C08D48A1B77769F01D5058236C655FFD864B
80E28F900191D4EB349AA5E400A7B0A0FCA0F3E79D7A7C69775BF754329397B7
D18B20B2683CBC4A19729BA878B3C17EBA0A7E9EE297A5B67E915CAD92C8F356
582B8299DE6A58E73408F525F7EA895C48A8F0D626A06A96A50348DFBE479D89
4272576FBB0CD332193D28A8F11503BAE98F8E1D73CF5BCADF23DCD4E6586ABB
323568F5A34E359661074D50CD8D9DF27191FCE24F10225A5D721EFDE2547E1D
CA998077D2340B1A4ADFFF570AA677CDF3305D5E3A394BB1626EB35074D4EEAC
2F037CA2EA389F7683FD17A8E07C12B4CB3BA8C249C9B12D297C618009F76717
0EBF5F2DD39A6BDA10A2E5A811D4E190660F5FDDBA29201B6F8042620397AB2C
E59267A7247B0463891831A6F40582BC3F614E5167B646A8F53D8A31717DD9A1
9034034E705BA7884F0E0738307AF69D3517147C282747F2788462FDC4336A4F
9CD222908401A25F0A1F7B13B8DAE622DC965AD0BE62497420B70C04AF432237
E0FDD043456187658ED93B0F9822A3998511DF05E59CC85B7B9992CA0CE3B814
9723BAE70D2631F32B4BF93511F67179FFAD2075E1591CA5907A4C67701B56CF
A5E5B02EB4A842BA1F18D6864E5677359C2FB4AF5BCBABAFB053F230CC129B45
8D15413F736EB07C571521C7DE2A13F2AC1C133D491B0A607197BE9AA1231D96
BED7968788246B2E4D2BD330F802810F5BDA3760FEA5210CFC6F54748FB1D921
5CC3624BBA5B8962AA7D94159651589540B17CF7A785F297264F9C1006D36928
6E2756D3B623A6087E4B106FBA76255903C624C07E18A1AF4E185A533C640711
86BB477A906ADD36EB6C8F4A12BC2F01B2B98412E4E105977640930CD998D990
0254A1E5E9843B7A8ADE0AF6D5871E6D3D666465AE69813A2E26333213FF6713
6F08D55A90C079A56E1B9AC655F720FC22B5AD8550FFF26DA7B0C5A0B60DDB05
64E8FAF684F3A455BA9BC9278043D79537D201D520E38750335A4C8FEA887377
879331B68DAD6B253F4FF9981D0F9B9550ED5179B15EEEB00E560A3DB6E5973B
63403E4E2F40A3D0B937246E9652000B917B1369741E0F913C14C2D2D6D1FCBE
2CEC4422177C58523715BD070002EC2E13D383A1DC8C84228862B6C5D3B65667
9FA97E175239BB7FE7E37E14B96DD7960A8AD49DF428CFC13B5D3CC22E245317
47B5244DA97F1DF954CED2D552477237CB23D037C0DE728E26C82738954EEA1F
F34FE497DA005AF03746DD2ACF77F6E6F2C224862A1D18AF6F7A5DAF34564387
9E01DBFF49F8621C058C04C2B3F4F3033FF3E8A977B2CD6B2A3CA4A6C569B19F
C5AC457AE9AF334DA66A730960C7565E93A2D373C0E3DE14646FFDA05DF4C6EB
6D4CA8ACCA3C3115764F77B842581760BFB9E5C0EBE55308B0577A8F4D968CE2
BA3361D79378D451DD150C34D7E901397AC63B33BD7DB13C50D678F5DE999238
4B4EA15BD449C46F262D931478F5685CDEEC4C4201FC3EFA607AFB8F27AF6751
125DE42D2FE2D31DE769B7E7FD8CC8C5D91343B537139A822A5BC4160BB5314E
37501F65B4FC35475FE9E03E34CBF6795AE86CE409500BD0799DE39FA69978B6
EC74D2197C03632D3F59B85F404DB31240968FA75059B2581B101E028CDECC2E
7E5E25DFA106E9B8ADB81E82BE9ED3BAA9D03EEB22B7B67AB1262DF6AF5F5EFD
A5627EFEB84F3A5F92EF2557EDA2843D7D18C592635623CEAB14CC3620F33986
410D6DBAEF9F86E4E6682054540E2B01D8FF2161F10E66851A188BC15BD6666E
8D3F21709F196A31EE676D28A2D12639CC2E7020A52910F052E61A0710DF09B0
064171D05611451BD24FAD64716F141E1C41D3218A8115A3D73CA041D02B46D9
28C3D07DF0FB668E8E91409C8D0A26A65CD737C075E026AC0A974C9BE658199B
3B9D82ED95E4646977D8F60717DA4C68767DBD7E8320D5AA1D5DEB2E6B009759
8282F27D64F1F904830AAB501CDA4D9233FC2F12F77F0FBCC46E6B729C71F6D5
E6F3EA02EC35D1048394F4EF2177FC5EB726DE5EF2DE7997166B8BE5B5105D08
EAAC3481FC612665CA112D3F889A0E5B7843EFFCEFACA24A01B6AC2B7DDE02F4
A9295AA2409A3756BAAB44608DACBB56840060037869455BEBA46F10AFC68DD0
0563843DF111C6D34911CF13AA6023E5E899060B5EC60D0F78FDEF3E981151A9
24903EB13ED1A67EA1977449716D1A5A7EDE1A2E9465C9C2B20A58AF02D9F373
73E627CBF296B3A6A4670C39F3B5EA30D76F0362C81020A1777F0ADDBC6B52F7
213FEE1718214087837049CF2AF00407639657428B9E8B532F68B631611A3501
3D9DCA38090E227BD0D6D0FB4130EE866DB6B195C873AFD18DDB3B1E40F740C6
B3B375ADCBBF628A07A5FACED539FEDA3379D3B60216C2EA6629BE2F65199D82
FE3AE627D7C67270F3497AE75F7A9514968B5950E2D63C38DA240AF4E6CAE88E
E25167D179108679876E7C80C85FE1D2BCC2EC9B88BE76A8F5736E8E6B3A9CF9
42E58A4ECB7914865E67C1468CF66D658206830B9380FE346DC2DC4BB56A92CE
4B5E4EA9036C177869315A2D9E6CFE97E3BFD7CBE0747D40CE5E8A3A0988576B
8AD2B1E4314C0D8A0CBCA08844A49F7E054D31BA7543730C0A7390BC4A288D10
CE29E389A4791305D3AC1BB6F77C805F1032787306F78FF76A20A9E629899F6D
13356768D33D7B9E294E8CD50CBFB9CA02A193922BD9B4372C912D1689B6644D
52CAA30F7421E8114D077288119AD9514EF21E5B9989CCE2ABA0C12549FDF493
FFB39736AC9EB72DAF45E4EA6057527FA9F5AA0A1A3F03C12F7482E465C766D3
760DA7714D56C91BDAED507A5572BEB51A895F8DD3BD5AAB042650154FC7E4E5
5EEA6194DF73AC5EE2CBD4EE26E29B1D2D0C458B4850BFE842DDF2EBB4E2A25D
C6A11CA2D8F346E2B736DF88A3D57BC0380B52396A6C039212699F5D3342EB58
0C3DD5D01D5078479BD9FD10C07925556C0AB0F03606F33796BA72074549EDA6
E33644F62CA35207D7421D2727AD8419AD1772789D33405FCDDC9286BC34C974
A52297F5BBD2E541E8BB473F733AE5097BBC9D5FACF18DE4173B4711E28B23ED
16E0A6746A60F6FF903026A3900169EDA87D98396E762C2EC963D89197B8CD0C
25244806BE7CBF46BE60A8F9171731EADFC969C28679B025371E5572E52A0EF8
B3FD9B4638D03E20BFDEC9345E70B8166D38846DCA68E0D0B4B53629C7E7620B
45E0A610BCD07FEF8814CF915CFB11119F42407D1C6DC1E6353451D40A382C2E
C74DF2A4889ED5A3495C3E973565F7178CA190D22C9693C10EB12C1E7A8679CE
4AFECFC964CC98111BA4ED2BA9B10292A71D5B11870EB08EB483922CE8628A06
05E7CF6DF93E112B60EF888AA8DB52994EC33DC7277D7B7A4F913AD30257261A
D6EE80476A9A8D316D190BE6CE0046CBBCED365AB305495284FA921BE0638E00
63DB2AA4C5F163340BCCD1061B469504DEE350B82FBE1689C1B65D095405614B
35997D6F0DACA7190D64ABA351705B17B23FE2EE5996FCD607F49F54392463EC
DD5B944A4B82FA2BE3E75E2946D483060DF99277340B0AB65A2042AD088E2B75
BBDAB869D1940F64B50D25078519D18748AD64AC5615EFAAF4F3105B0111AD40
70EE173ABE6A4ACE486B4E5999158A4377FDA6922FAA6E9305F48570D14BC81F
BFF4C663E1EA9D1E050534F9315A663C4C5DA52CB02EA6408AA473C32CB0CD71
169BB43C0508A842F400240F0063243B4C459A1FCB3312C41C32ED0EE87F591A
BCB6D5D3830AE4645CB4D40336DB4AB6540B52E70E1EA415CC6D886827EBC5B3
EC35CC5C136243B0C20B3C603B648B132B99D05F9B48263ACFA59A856BE74441
FECF5C6D1FE9D1F4F9942F460961901E16017144C37E83C6822177B2A6C47ECC
6C47A1104460665E5BCFCF08874008302750EB991CD98D0D8D22B921F90B99B9
05EE7C39F2BC2A7798157503743C9F2F267BDBE2E8A4CDA7317F81DBF8962E1C
EC02822CC7F770FD4D08D335904375BF0C6DAA0510771627ECB9EE69C0F47D30
69A87052989DF80D9F4F19F75B070C3689AB3BE0966453F9D56CED6C1745B50D
813AE6D7E44B73423AB3778ABE4CD2C4DF40E14C5A426043F7057E2DFA2DAA70
EA6723F1C7967FECB1E7C1C0CA283334163FBE31C32254490170C3513580A552
19A5DD75E6C4ADCB12D33517A03318A6BBC7E4214266E125140D8C40F78A0340
1F95D9FBEC4DCC55B71E89375AA94B0D55646F6C069561480407D0A3AC127024
D7D1E9ED6B599A2A8766B8792F46D35508B66F302D289405B101A3C6BADA680D
8C56E2A00B766A4CB155446F862FCF17537A2BE85418E20CD77C4F1F69F70BC6
17BB5DA8FAA876D0E8BABE273A19C04A8697B3E3CF4725E2C77C8761A9243F24
96F8AE96399996001A57FD75106745AB4646FB9C6421F1D4EBF3BE533BD11AE8
14BFBD6D308376B26E08E4ADA490DDCCA94BE8240403D5EB0FE3549061DFB668
4105B4FE77189546619B6BCF3F9723E278E98D50A17DB8A4C46744FA21760635
5B332689316BD17C966D466AE737FE3ED7ABC443ADD88D4823A10BC9747ABDEE
027515AC353A420523F85298029475D8BFD83A2CD00C02CA07974BAA581D2215
A850E6E4C0A5E17E0EDF91C63FAC18C70093F40FEEAF0350B403E2806F4EAE96
BF616A805616EE55C4657418C26CAF54187A6684821B86A76F15088AC4D5B551
66C3CA8DC61E9810858D1204F899C7E3A1754F483134609F6EEE6364B1CC04FD
92C86EF194FA3249601AD722D75D1D395CD15A93C768EC60A486AE885683364F
93DA00A865C1035F913FDA69E7D9A0422880FB81EC23C00427F07A5EA3CCB613
83C859958AC53FAEA26A6BB39ABA068863CCE3D447720BC31A5136E08EE58963
093AF587A72112D55853A1048A2B1695DB2D7F13CC924F2F0902071260C33ED6
30893A04577C0ACF0681C0FEC23E5404F844A83BB5A2F8DE1F0792196139993C
1152094BC36A6AE5BAB4B8281E506F485F0BAEEBBE71E174B7CED1E52A8242F9
DBDF3E0FBA296538D964EB5B7A4E23B1BB0F59872C9D4FE8498203E3AC08B71E
D2B965AA6CD5D20DA6C83FDC86F4A5D68A58A72C5BB9BFE9BC755C56B24025CE
6F24443D3CF32CD711D3D94C7C1DC275DDAE3341D840090F97CB6CAEF274C94F
9F3BD3AAB3F98BA8A7B5CE5E48D1462DAAB37BEB1C10B410E8D33FA42D898183
BD4F807112D78AA94509E33C179BF7C9E82E55AA7D09E128A0DA06A330CF4AF8
5DC861498CE029CE8C1BD15C923A708F2E7AF98E4F7B34212A0CB417553C86EB
6DD46B0466F1A21D29FC5111226794ECFCA5DD4240C0B8D106CCD7EA6F03E133
BB7733F055D6FFA04EF5C6F872B4FDA3E42F0F036C4825543D75682ACF71B548
DED160ACD05625274799D0AE201305DA526E01A3D2A719B1B15C05CC09467F3A
5627860C0F36C503EE392E1786620F3F2287AFE56634E03566B9B1F537FD92A2
913166228791871A8F8CBA1A1DA634E8224058052A10FE1E67CBD3FD21A6C07E
243CBF58BDC78577847664EEA5225EB8D6679AB17C563848A9D4D58995EA3609
51C1443B752A070D9872FE1643F0677019235AC25DC2B29169D38308F2170A1A
A0FDCC59E6602197D2815B914041FFC7106DAAAF30CD97400C6D0826A40385A4
C8520119A065CF32CF2FC5FBD8DFD29222528A7F96FDA533145846B3428F8239
E50277C366418D713F84B12A5FD4F904DC13DB1844A391FDAEB97643A6FD2945
942FD4FC5A4A35E184F23304B8B4D93D0C37EFCC4E106D4FCD0DA3E5D2117589
3FFC2BD1D121026562C55C455C3585050B9460891B006F62D9D9B66695C3D348
A467C14C0256FA9621CB056E7CD389505194FF463BCC4010897F9A690EA87D9D
BB3ED4C174FBADB8A4744C6E4A44D773967FD703EC37672F9993DC48BCC8A060
6CEFE8E6B8F10886E15BA0466AF410B90DF0020FAB88BE493606B6A734EA85BB
926950EB10D2F2CFDBD182B0F133809612CCF6ACCAD049C8005A42FAF78368B9
E7684F98DE421BE0A3BC0FAEE024A7BE67E15C8394F17FE84DFD8156C2A3E94D
08259E15CC657E8CE3088395BF6B5F825764E141AE15EBD186DC049261623D26
8636705E06C6E4A1F8ACAEA59F91B042DF5DB9C2AB986A784384706A43E5F18E
42C29CC1CA86D4F247B3BBBC89F3633EE074DCA4AC15B1E33EE4822812A62E88
C32B0AA57249980EE17AFC1346074800FA529445D18649A0475246A25CF325A0
BDA06AAF392FD455218B13D9ED577D51A9500B9FB7860716A8E2FB3A8C4BE3B3
6656C6A5653AEF00184020ACA0BCCBF48BE3BF91E11C8658686C89848E714E6D
DC158DCD1C1BC03B83FF94C60B1DC71CE8A86B46DBE661C9F8F4677F8A2C7CF1
E41A91EBDA2304735147BE66CDFF2673F09D408297302124C127F0B35690CAE9
CE1679120CC4D582FB69550AD34A047DDFCD9D411724554CCED753DB52D6AA7B
22B0C55EB698ADDBB0F8ED15C971AEF113C74B9E25DA29199237B98DA4023665
C2A63A837E4CAB38F8DF37DBAB5DC80C0C3FA72C8A70DC76B5B36B2EEADDCE74
23CF794B66E4DD3B35BF99893789063BF7B01D5F186B2FDE518B2CF2EDE51F81
38244BC64548AC3433A80B86D6A0CA26D77F403C06D65B7394BF1FC7D06D37A5
E70ACD844E3367DE4DB71312CBB85ADD21D5A1F99BB8427F252D90ABB66D7154
EA5AF4A165DF6415A0880AE784071E6B3E2101F0B663DE14DB1ABF8B7CE0E6D9
D24F9CDD9F80028D37C9CB4067A28D41E879AEFECDA71F649EB3C250BFF809D8
1E427E3BF24E85C75F080D93E0314883988B3A4A2B72A1B4A3D2189AB6ECFFBB
C58151AF05AE335200711ED945E18B4BBCE24A8A162BD9BB26137253BA8B5819
41E759A7CA7CBA129BAAD438E87189F2F6AE7C86F4EA099DEB23705A500332A7
4F141D8778EAF3910486B2EA25AAD16B60DD804D0E5BAB0FEBB77BC95EDED08D
B8941E040D99E8F44E70FF842306ACCF65C0AC9673859DB9C3A724238CB8CE62
255BAF0145692EE3B52643A0DE3E667AD03EEF6C753F57E34AECAB0CFEC7B07A
150D7151E57BB3A026D50C7A88DF5F480147D87DFEFE463F76122EED3A0353A7
E13321F7E480062A971611704D93A866C29AE2DEE5EA872F5F35A2686E37695C
ECBC6F6F2CE5F46491EE865739B0D8FEA41E1070870F50E2EEC5F10542A071E1
A861CC30A769DAA4DDF8CC0CCBACF1FAF00FAF91D446CE54AC20A4B455D06578
4E93EF4D2B88C75F569346AC2B878782D12F909513434C6DF848316629CA47FF
9B07038337966F12D38AAF6ED045BF1102FB39275FF7D8D7983121C2134E34FE
F1618EDF8B9BB56654411A74A23840473DFBA36E04D180892D9E1AD5D37BACDB
CEE97B97156C9B60321F42CEB4203F46DD2D9DAF8F90CF4F43A855888DF002F8
825A21D0D4869F02FA1C99FEE1A786CE64B33ECCA62C7535209C546D9201261A
A71B05F2E629B76DFB0EAE94203BF88AFA8E328CF74D77049949C2CBDD9B71DD
F800A4D407601BB632B33F1E4AA97827F837F97419F753FF9C5850EE37E59A4A
3B90EE6AD37F3D078B6D4120137695A8BE5DEC8383E556D1067F2C6D1A2CA6C8
4ACED9E02D9E46CB2FE2A6C3F956DD96560A04D6A74092A710A9A82AF7E4210E
EE6AC5E5F8D27EE4E0FF266F35E74C0043F6C8C98511EC1E2A09B130BCFF5A90
55C76EF4ED2A397E30973F13C9C94E3E83A75451B152FD3D6926FC9A607428F7
1FD761E209A9DA1A144B6457B085F2B9EC116092166C90766F3475C377D3C5C7
267BEFE151C52A60427176D702F257FAF929178B7AACAE1D371228606B58787E
BCCA96D797EF45C542582B6F56F890EC5EE8DD9D075383DC1F9136BEFBB6F17E
8DE96E921502FB19F0C21F0A4BE48F86B39BA9AAE341296170B648CC5C9EC028
8EF5BBB0507D12F94D4695BDEC556DF7A96D1319C3784A5EBE427F4C91C807F1
A3B23B0DD937C0CBCED5F1639C9F70A7713F7B08F91118993DE5FE47A8C1CA0C
CDFA262B10E301D12B0BD8D72E734FEAB93AE8DD633FFBF0DC90CF308FEABD69
47A94D3302553EB9B2D09470AA5C38E0D171AC1A9679529C433383CA46EE9C73
B2F8CB85EB85B1FE1D7C558D596C7D0097FA31399A7AA052A6E26D52BEC23C21
EC0C0FDE2375719E962E06F1EF4CA1856F591A0C694A6ECDB6ECF6E7C406EACE
825FBE959E9D0FA8D3881BC3D0263B7E30221D3DD425D581ABB8022E13C0E2E4
FB3051B3684E4A333B38E5D15C13CB52DD4DEB99D759F4BF8C5BC5DCA1C10A86
A4B9DBDDC8BAD0B87F3B257C6DBA6ADA67A30E20C3689EABE7B72C1F16AE1738
4099CF49B2C4A4C7DC2A325932A4EABB094CF9E8B2B4CE83A1D2EA3A8DA248D8
82444485E8AD4CE8585B063965683DCBA5BAA51ED9F1F601F0F088C4C2859774
6825CB278DBE285E67328F96BE577CC30B6CE0F3F2007BC84B6C55AE73422962
DC662AC810AC410186842E869237125C5772C8176DAE714A0A6FDBB0B23C407C
B2A06FB5E7EE151EE99AE137DCC009D14210DADAF1CE1E8ED0C6523BCC27E934
D0D7356F6E365562E7ECD246975993E68DA3E1EC6FF377CC2986D3B2BDFFE2F4
653223E9D6823AE436DC4ACE2F1F86F6E84628E12C1F5928573B1C8CBC0AAD48
38B333C496A9D970B195DEC511681AD69F4B4708462C8D057BA99AE776E482E3
C24C3E399215A98CD4F38513AE193FCACBE59D27C5DA06A3A0C730A82EF1EE4F
A44EC115F1D1E455CA8CAC9B704D5BAAACA184FFF656F646AAD786BF4C317CFC
5C0E993FCF12ACC259D0219E14DC084DA2D384DF669B0CAA80B3AA3DAD49811D
D9BAC598C2DBA138DEF8C4B0ABB3B1369130A736E61AA58A0D10AFF07F152708
B2356E4C1EBE6B28C199D656ECC1E4C0AC9673859DB9C3A23FE5736DAD43975A
BFF9D5FEABA2E12AD0F128D99676B0CA830C74534B6AAF39249F47283B9824E3
ADBF7B32F29E2B36E8CFC9BCEABDB435BF99B5B39F762C2DB120D96A015B218C
A7FACD46CF6258C076B263342E8A69F9B716AA9B97D858592CBA72EBC21278AB
084A8CF0971215A882C2BF34FB77D107652BD59E002C56B3DD423BEFDDCCE823
FEF6B7950098A3AFD46D2241832195CAC05E676EF647EC262E4C15BA42E855E2
49A638240236B93471E07B53966F0A5D85EC4BDAEC16B1C259922ADDBF3A5BC6
40335575C69A9E486AA14E361EAF46D6B64A87473BBBA48781267381C8AE4E5E
2B0E7865CAF525ACBFA6DEBFC49F7EB60FADCDBBCDFF0DA9AC65BBF7F4307058
B9BFB0C18463C99A32EE999F4F865B7E3D72C2003B5F73E64910D1C29D15ACED
C458049F7B6380597433E5D617A93CDA0960657CC231C6F1D98278F2222596AB
76866C8A62B4D0BBBEB154A4D9849A7CE0810919FC7012142611205589FA4C22
63FAF831B150E96EEA9C35B3B2AFA2DB77690189F51FE955C8390E34ACD48221
883665C31B5361DD832C513510C5F90752FD8DB34315A5F973442115235ACAC2
670230C67883D96482A0B6571AAAED118CE796D8CAC3CE005F865BFF9AC9646B
A8625A1A98156FCE4C85ABAAC33AF4728E1828DD1B457720FF7990DE83E35806
2DBED3487D4FD55DFAB0B93E53C3F9B5F5A6D774FCC8EE88C508D30C7D372344
8BD10797AA0AD8A1DDDB254B9555011244A3E174B7F5DF401540ACC1F8B7B611
37DB4BA67D0DEBA6D9F25C2951B66338F33FC99288453C1362074DFFACE8D28A
51C057D5EDEAAAF378488F6C016A2CA41C557E336E1C3F1D8D40F1B81EC42BDD
23DAE4CB7A4DFEA6B762AEF6C9CF1D29EA476663F48512C7782E6A585B27A802
4327A2EFAC5F28A4A1BEEA99900F69ADA19875B7924F6EDCCBE2C4599CFE1069
89C39BF576064C43024C9CEEA2F45B2D7E124B52BE73A069E5461A780800F73E
689283EFE6D3B3B62D78710774FAAFBD305140E6FD85537065B2108C4AD05FE2
9AB98A0AD5E78D650A9783A23BC6D3327795C55BE13478846EC9DCBF131E2505
D1CDAEC84DABB8BEBB7E0CD682F962F84B835771B081024AE56EAB0ADBAF083C
69A1EE425EE75F012DF7C4B48CC25903082082708D050BC6A2268B658DA3D419
D15B6A18B8E479AF6FE82506A3BA726B3B4117E5E36F9DFDFD9E361735882B51
F8A67A20E60533C5221DA902CB4AFE157FFC11CF1A350F96189A4FE5F57123F7
309D07A7A513C34550DE1304BD43569DF76D399BEBAD4D83B7499EA0E5B89C9F
61453C1FA5B7B997087F3D42FEE91B69CD7A1B612366BBF83BF894E607206198
9E7CD13C8EE98063AD6B54ACBDB160BEFCF2BF5D4F33F4AC0E89C498E8ED6A11
315A7926EAB35D214C30050F9A33B70AA53699D90A775601F1B0A0D659817E25
2B5A8C6813A96FC2DDCAF8C520EC5C7A6445104266F118A733F1BA0F546159EB
A5BE330F8C828614CBCC312510485898B47521239A016E7B2E24248AFECD4F24
8A5953120564406F9094837548169A1FBB90CED2922651351E017DC2B0B311BC
285C65CC7067676228D4F2D9CCE7104D135F959541283197F3140A8A84D41E24
A090938D61E3CD4A5C580483FA11A155232F8BE95D3A024540AA09D9E2DD6690
85955125934CBA8BDF1DC523F37AE9581E4D0AF6E311DF4C442B557B1D8F8F05
A5E7B8CC81096EF7F6CE734CBD4A26D0ED63439616165C48D81E106E8966C31E
C886F294BAD5B3D4F1750BE818B1AAE184113AF08ECB46DB7C01E9F0F5E1390F
C739FCA36681A1E72D13348FCFC9E4797ED7C09B14979CB80A1CBD5C9D3F7FD9
47861DF9E01BC2B1886C018EF3F4E4FFD426E7AA167BAF69B3EC027DF0F7C268
D78C2627CF80F5882D898A87B674BE6CCE82CF086E5E72F0479C98C950DA7A1D
FBD3B2B5ECE3B769FF9DF3AEA748B8C7C06D6C86CB601435734978594EE02B3A
125FA5E9B07613EDB223AEC59B6C60A3A41F3B793F0DF7E27E777DAED7073391
31C0F1F79A300906F3B11F9478039EA24A8DF7E062AB134B079DB69BA705B2AB
4EB8097E072533ED7F63825E511E2AB59C76ACD156444E321448DF6DE15690E7
04FAB1BB771B53E9FE6A700BB8150340AA9C385BC3BAF0306A57559E0F1F7854
56D679527427E8CF926638F79F7C71CD89320FF7AF38AEF25432EB41B392E277
CB2DC3F878B108184636A00E275903B9C6920371D960AF1E479F4FA1AF68207C
ED2E94DA0F10802F034F42DCCB731CCA27849432FE629493BFFA18872F751690
BBC0B763C1FEA3F1229B63B492706939FA9DA271B00B93E3A1F1D26998556BD3
814BA22299AA1A2B1D3BA66B7FA20095054AF28BF52EBA599F2BF47AB507012E
227ED1A71EB7CDE11B6096ACCDA61A939731EC02635552776FEE1325E72C6538
EA0AFB8E10DF846F13D1564358065165F72619FA3DDDF572EAF1DC4A15C98598
0B9AD9943C7105EB6A2D5209EB0F2DD8BBB2FBD8C44174452634EE29D2332D6C
B4F19ADFB88EA70681F4BAD77DB5D7580042520139C5F48D9798031B26349757
DCF5C69CF2CD3BAF3527B0F5D4EB07EFD2253235DAC2F4595848BA8AD39FBD70
117582926158654B0125651ECB43CEB1BA36DEB9E1F3F8D969226146D004EDDC
342A0AFE28326156CE0E931222AC23981C6700E067D12C4B08D331837019D92A
EB3AE25DC0D49A09C94B7C5DB3304A7832169014890DC8675519A483DBEF5EF5
4A7BC7904EB5D42D97476E3DCB3A1CD9EBC255A5A7691D5013B84C5997A2EE6C
C7B214A02EC3D766313C6BCDC330336A34B187020F0AB0D7BF13975968EE38D1
DD890441F4DEE7F7129DF1AA12F0C1FA49D07F1B645F6F9D7EA6FBD9CBF441F5
3415C5ADAE00B8471C2871053025E3D50A000068FCD11A2CEE5E77E23F8BE09B
EDC4FE24714CBA549FE97BC858644291E51598E0BC657BD8D5CFE2E8444F7F59
9E6DEA5479D3B08D9415A7070B5670F1C9C260A8EEF31DEFAEEFD8EBFB42BA07
FCA1303EBE17FC215676E5ED417D4483F254997010067AC6F43C98DE396D9383
4E9BD6A227FFC45427D500CD62C7455D20E5151B7B3CBE75B9163E58651D2D01
7DB3171F5A0C779983D1117D54D3433C238A79AE425C05CE046FC264F2FA5888
5245B3AE9D55B285DBC318BC4E9BE22D685AE00DF5B7823BE0E44B43DE1A5397
3B52843FD8A2012FCED478661DF85EA44F1F910AA090E4B0E214942AD815E71F
5B57BFB1396D03AD7551F7076BF5CC635D1D427713BA41CAF12123EE515A9375
D4161F303A53DF3207B860C48C0945DE85718413D95312DA27023513FFF5D60A
E86AA5C710EB97DE0E46468695A4CA7DA056F29FD4BED4AFEE4F8515FDCCCEA9
D00574CA5B374DC0C4B82755CED7064D7977346D355B26601E6A64941720FF6E
82E4C69C4D4A5DA86A2A50F2BE7799659B2CC1E4CC6481E9174ECE4098F8BACE
466BFE7430D55B2896E44CDFA020B4D52FD9095E387F17810EDC40F50041C1EB
8EA834422348B422F1F8A12FBF88519C8CC5598F01F892DFAB4441FF6949A8AE
17E9A61C1CA7EC83403AE46C45FEDBF6A20D911A90894227A226C88361C7EACD
6BA1F512D0F281536260E1D897B22B598570B5B0D377DAA3880FE76FA8221117
0C960235E3C7DAAB4D1C284B6B554392C487C06647408BD48BE51C78D42DA296
78CF01DC4B7799136DC2450B147B6946F190D5FEB3C44A853CD37D5433567E0F
64A808C601AA1D159B6770E4555A6702857E5CF0C2C7D239322949AA656C499B
BAFA8A882901056FA3C45307E119675E0F10AEDC67B46D836ED040C9568CC2EF
4F2549F769858BD23351DAF6D726E7C018B939A30D33EF0F19290CE3F2FBB4F2
FE6B622ADE1F4866FDDE0517AC3289D39075FE2998D2B9FB87FB110E28EBE0F8
F54DF95D20753163E8B19265A659BBA618864D0A1C24AFDCC68A0284CD4CD4ED
13BFA3FE6F2FED7DEF4F9A37E16C9725EBED86BE3EA729F5DFF84C1F13174B69
ADC3420D59BDC42DC201596F464D05F40900994344A1EE5D9AE5EB2B1D6B7631
6D33AF07CF95F559ED2D75A36ECCEFC7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (nip11.dvi)
@start /Fa 138[39 39[63 77[{}2 58.1154 /CMMI7 rf /Fb
124[51 131[{MnSymbolA ReEncodeFont}1 83.022 /MnSymbol10
rf /Fc 156[45 32[45 1[45 1[36 61[45{MnSymbolD ReEncodeFont}5
83.022 /MnSymbol10 rf /Fd 114[37 4[37 52[18 83[{MnSymbolE ReEncodeFont}
3 83.022 /MnSymbol10 rf /Fe 134[41 47 7[42 12[36 20[67
81 57 8[59 63 6[23 19[54 6[54 32[{}12 83.022 /CMMI10
rf /Ff 133[37 44 2[44 46 32 33 33 1[46 42 46 69 23 2[23
46 42 25 37 46 37 1[42 9[85 2[60 3[57 1[62 1[52 2[30
62 22[42 2[23 28 32[46 12[{}31 83.022 /CMR10 rf /Fg 139[37
38 39 1[53 48 53 80 3[27 3[44 3[46 16[65 3[57 24[48 48
48 49[{}15 83.022 /CMBX10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
0 TeXcolorgray 14 325 a Fg(1)47 b(Prop)s(osition)p 0
TeXcolorgray 69 w Ff(Let)34 b Fe(')p Fd(\210)p Fe(x;)12
b(y)s Fd(\215)30 b Fc(>)g Fe(L)p Fd(\210)p Fe(M)9 b Fd(\215)33
b Ff(ha)n(v)n(e)f(NIP)-7 b(.)34 b(Then)g(for)g(ev)n(ery)e(tuple)j
Fe(c)f Ff(there)f(are)g(a)h(mo)r(del)g Fe(N)k Fc(c)30
b Fe(M)109 425 y Ff(suc)n(h)d(that)h Fe(N)21 b Fb(\203)605
390 y Fa(u)615 445 y(M)701 425 y Fe(c)27 b Ff(and)h(a)f(form)n(ula)f
Fe( )s Fd(\210)p Fe(x)p Fd(\215)21 b Fc(>)g Fe(L)p Fd(\210)p
Fe(N)9 b Fd(\215)26 b Ff(suc)n(h)i(that)f Fe(')p Fd(\210)p
Fe(N)t(;)12 b(c)p Fd(\215)21 b Fc(\000)g Fe( )s Fd(\210)p
Fe(N)9 b Fd(\215)p Ff(.)109 624 y(W)-7 b(e)31 b(sa)n(y)f(that)i
Fe(N)40 b Ff(is)31 b Fe(C)6 b Ff(-saturated)30 b(if)i(it)g(realizes)d
(ev)n(ery)h(t)n(yp)r(e)i Fe(p)p Fd(\210)p Fe(x)p Fd(\215)f
Ff(o)n(v)n(er)f Fe(N)t(;)12 b(C)38 b Ff(that)31 b(has)g
Fc(@)26 b Fd(S)p Fe(N)9 b Fd(S)32 b Ff(parameters)109
723 y(from)27 b Fe(N)36 b Ff(and)28 b(is)f(\014nitely)h(consisten)n(t)f
(in)h Fe(N)9 b Ff(.)37 b(Here)27 b Fe(x)h Ff(is)g(a)f(tuple)h(of)g
(length)f Fc(B)21 b Fd(S)p Fe(N)9 b Fd(S)p Ff(.)p 0 TeXcolorgray
14 923 a Fg(2)47 b(Lemma)p 0 TeXcolorgray 70 w Ff(If)28
b Fe(B)17 b Fb(\203)690 888 y Fa(u)699 943 y(M)785 923
y Fe(C)34 b Ff(then)28 b(there)g(is)f(a)h Fe(C)6 b Ff(-saturate)26
b(mo)r(del)i Fe(N)h Fc(c)21 b Fe(M)t(;)12 b(B)32 b Ff(and)27
b Fe(N)21 b Fb(\203)2764 888 y Fa(u)2773 943 y(M)2859
923 y Fe(C)6 b Ff(.)p 0 TeXcolorgray 14 1122 a Fg(3)47
b(Lemma)p 0 TeXcolorgray 70 w Ff(If)28 b Fe(N)21 b Fb(\203)699
1087 y Fa(u)708 1142 y(M)794 1122 y Fe(C)34 b Ff(and)27
b Fe(N)37 b Ff(is)27 b Fe(C)6 b Ff(-saturated)27 b(then)h(for)f(ev)n
(ery)f(t)n(yp)r(e)i(.)p 0 TeXcolorgray 1860 5402 a(1)p
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
